{"name": "Development/Coding Guidelines", "id": 260, "content": "<p>Whenever you have implemented the functionality, make sure that your code is great.</p>\n\n<p>How do you check if the code is great? - The best way to make sure is Think About <em>&quot;How would you like this code when you come back after a long holiday&quot;</em>&nbsp; or &quot;<em>How would other people like this code while they are reading</em>&quot;.</p>\n\n<p>Here&#39;s a checklist of the questions that may ask to determine if the code is good:-</p>\n\n<ol>\n\t<li>Is it clean, readable?</li>\n\t<li>Does it leave a loophole for unhandled exceptions/failure?</li>\n\t<li>Is there a possibility of security attack?</li>\n\t<li>Will the code perform well, given the high load?</li>\n\t<li>Are you using language&#39;s native/specific features (whatever language you are using)?</li>\n\t<li>Is your code testable, how easy it is&nbsp; to write tests for your code?</li>\n\t<li>Is your code maintainable? How easy it is to figure out what is being done where and how easy it is to make changes?</li>\n</ol>\n\n<p>After asking these questions, you may want to check for common mistakes. Or, instead of doing that manually just use some tool/plugin to check for common mistakes e.g SONAR, BugBash. See the complete list <a href=\"https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis\">here on Wikipedia</a>.&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>Common Principles worth considering:</p>\n\n<ol>\n\t<li>SOLID</li>\n\t<li>YAGNI</li>\n\t<li>DRY - Redundancy of any form can be bad.</li>\n\t<li>TDD</li>\n\t<li>&nbsp;</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<hr />\n<h2>&nbsp;</h2>\n\n<h2>Is It Clean, Readable?</h2>\n\n<p>Try to name classes, functions, variables in a meaningful way. Try to use names from the <strong>problem domain</strong> itself. Create <em>small</em> classes and <em>small</em> functions. A method should not have more than ten lines of code (it&#39;s not a hard and fast rule, but it&#39;s good one).&nbsp;</p>\n\n<p>Keep It Simple. Do Not Repeat Yourself. Use a Standard Formatting.&nbsp;</p>\n\n<p>Closer the code is to English and the domain language, better it is (for example if you are writing an application for banking, do not use jargons, terminologies from other industries, use terminologies used in banking).</p>\n\n<h2>Does It Leave A Loophole For Exception/Failure?</h2>\n\n<p>Do Not Return Null. (Use Optional if using Java8, else use empty objects, empty arrays etc whatever suits your need).</p>\n\n<p>Take care of any null value which might escape.</p>\n\n<p>Write Tests For Each Value Which Can Be Null.</p>\n\n<p>Do Not Leave Possibility Of <em>Unintended Overriding/Extension</em>: Use final classes, methods, variables. Mark&nbsp;utility classes static final.&nbsp;</p>\n\n<p>Minimize The <em>Accessibility</em>. Make exceptions as&nbsp;specific as possible. Handle as many scenarios as possible.</p>\n\n<p>If the class is ever going to be <u>stored in a collection</u>, it should override hashCode and equals method in a proper/correct way.</p>\n\n<h2>Is There A Possibility Of Security Attack?</h2>\n\n<p>Is the input <em>validated</em>? Is it possible to perform <strong>denial of service</strong> attack?</p>\n\n<p>Are the&nbsp;<em>resources</em> allocated being released? How long are they living? Are they just lying around doing nothing?</p>\n\n<p>Try to minimize the lifecycle of the resources, objects.</p>\n\n<p>Avoid general sources of attacks: SQL Injection, Input Hijacking, Denial Of Service, Illegal Access to objects using serialization/ deserialization process.</p>\n\n<h2>Will The Code Perform Well Given High Load?</h2>\n\n<p>If using multithreading, avoid a lot of <em>synchronized blocks</em>. Definitely avoid synchronized methods. Minimize the scope of synchronization needed.</p>\n\n<p>String concatenation has been the source of slow performance many times in history. Avoid string concatenation in loops.</p>\n\n<p>Minimize creation, lifecycle/scope, usage of objects. Try to pool whenever&nbsp;possible.</p>\n\n<p>Avoid finalizers. Help garbage collection in all possible ways (System.gc() is not a good way to do that).</p>\n\n<h2>Are You Using Language Features?</h2>\n\n<p>Enums can make the code a lot <em>nice-to-see</em> and <em>less-error-prone</em>.&nbsp;</p>\n\n<p>Use interfaces. Use Checked Exceptions and Unchecked Exceptions in a clever way.</p>\n\n<h2>Is Your Code Testable?</h2>\n\n<p>How easy it is to test your code? Can I completely <em>isolate it and test it</em>? If not, there is a high possibility of improvement.</p>\n\n<p>If the code is <em>highly coupled</em>, it would be hard to isolate and test. If the code is <em>not cohesive</em>, it would be hard to test.</p>\n\n<p>If the code <em>complexity is high</em>, it would be hard to test.</p>\n\n<h2>Is Your Code Maintainable, Extendible?</h2>\n\n<p>Check if there is a possibility of using some standard design pattern or some standard library. Your code should not be yet another liability, rather it should be a utility.</p>\n\n<p>&nbsp;</p>\n\n<hr />\n<h2>&nbsp;</h2>\n\n<h2>Common Critical Mistakes</h2>\n\n<p>(1) Eager Evaluation</p>\n\n<p>Example: some costly operation (resource loading for example) performed at the initiation of an object.&nbsp;</p>\n\n<p>(2) Not Caching Things Which Can Be Cached</p>\n\n<p>Example: Some costly computation&nbsp;being done on each invocation.</p>\n\n<p>The above two make an idiomatic case of &#39;<strong><em>Lazy Memoization</em></strong>&#39; which might be available in many languages by default (e.g. Memoization is available in Kotlin, Groovy).</p>\n\n<p>(3) Temporal Side Effects</p>\n\n<p>Detect if not calling a method unintentionally can modify the behaviour, or the order of calling might unintentionally modify the behaviour.</p>\n\n<p>(4) Unwanted Mutational Side Effects</p>\n\n<p>Example: Some mutable object is passed to another method, and then returned to the client.</p>\n\n<p>(5) A Mutable object being used in a multithreaded environment</p>\n\n<p><em>Just don&#39;t use mutable objects in multithreaded environment, it&#39;s too dangerour!</em></p>\n\n<p>(6) Object leaking</p>\n\n<p>A partially constructed mutable object being passed to another thread, check for this possibility.</p>\n\n<p>&nbsp;</p>\n\n<hr />", "authorId": 1, "subject": "programming", "tags": [], "img": "", "summary": "string", "lastUpdated": "2021-06-13 09:28:53.830903"}