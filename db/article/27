{"name":"Dynamic Programming","id":27,"content":"<p>Confusion: What is with &quot;Programming&quot; in <em>Dynamic Programming?&nbsp;</em>It&#39;s supposed to be algorithm, isn&#39;t it?</p>\n\n<p><span style=\"color:#8e44ad;\"><em>Dynamic Programming has nothing* to do with programming. This name was used by its inventor to hide this invention basically from Govt. </em></span>[Source: Wikipedia]</p>\n\n<p>We will employ <a href=\"\" reactlink=\"/article/204\">Descarte&#39;s philosophy of problem-solving</a> (we will see what it has to do with dynamic programming later): The principles are</p>\n\n<ol>\n\t<li>WRITE DOWN (even if it sounds obvious) WHAT IS SO CLEAR AND DISTINCT THAT THERE IS NO DOUBT ABOUT IT<br />\n\t&nbsp;</li>\n\t<li>DIVIDE THE PROBLEM INTO AS MANY PARTS AS POSSIBLE (AND REQUIRED TO SOLVE IT)<br />\n\t&nbsp;</li>\n\t<li>START WITH THE SIMPLEST, EASILY UNDERSTOOD OBJECTS, AND GRADUALLY ASCEND: (positing an order even on those which do not have natural order of precedence)<br />\n\t(a)&nbsp;Simplest form of the question would be: ....<br />\n\t(b)&nbsp;Simplest form of the solution would be: ....<br />\n\t&nbsp;</li>\n\t<li>CREATE OR FIND EXAMPLES AND VERIFY.</li>\n</ol>\n\n<p>Let&#39;s start with a real problem:</p>\n\n<div style=\"background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;\">\n<p>Given an array&nbsp;<span class=\"math\">A = \\{7, 3, 2, 5, 8 \\}</span>&nbsp;and a number&nbsp;<span class=\"math\">S = 14</span>&nbsp;; Can we select some numbers from A which can sum to <span class=\"math\">S=14</span>?</p>\n</div>\n\n<p><br />\nWhat is so clear and distinct without a doubt here?&nbsp;</p>\n\n<p>A lot of things:</p>\n\n<ol>\n\t<li>If S is more than total sum of A, then the answer would be NO.</li>\n\t<li>If S is any one of the elements in A, then the answer would be YES.</li>\n\t<li>....</li>\n</ol>\n\n<p>How can we divide this problem into smaller parts?</p>\n\n<ol>\n\t<li>In this particular problem, there seems to be only one way. By dividing the size of the array, and dividing the sum S.</li>\n</ol>\n\n<p>Start with the simplest, easily understood...</p>\n\n<p>The simplest form of the question would be:</p>\n\n<div style=\"background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;\">\n<p><span class=\"math\">A</span>&nbsp;is empty <span class=\"math\">A_0 = \\{ \\}</span>&nbsp;and&nbsp;<span class=\"math\">S = 0</span>&nbsp;</p>\n\n<p>Can we get the sum of&nbsp;<span class=\"math\">S = 0</span> from an empty array? - Yes. <em>(Actually, you can get a sum of zero from any array,&nbsp;Just don&#39;t select any number)</em></p>\n\n<p>Can we get the sum of&nbsp;<span class=\"math\">S &gt; 0</span>&nbsp; from an empty array? - No. <em>(You don&#39;t have any number, so you cannot get the sum more than zero)</em></p>\n</div>\n\n<p><br />\nNow a slightly bigger form of the problem:-</p>\n\n<div style=\"background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;\">\n<p><span class=\"math\">A</span>&nbsp;has one element.&nbsp;<span class=\"math\">A_1 = \\{ 7 \\}, S = 7</span></p>\n\n<p>And we know that&nbsp;<span class=\"math\">solution(A_1, 7) = true&nbsp;</span> i.e. if&nbsp;<span class=\"math\">S</span> was&nbsp;<span class=\"math\">7</span> answer would be YES.</p>\n</div>\n\n<p><br />\nNow a bigger problem. Let&#39;s add&nbsp;<span class=\"math\">3</span>&nbsp;&nbsp;to <span class=\"math\">A_1</span>. One more element.</p>\n\n<p>So, if we know the&nbsp;<span class=\"math\">solution(A_1, 7)</span> then we can know the&nbsp;<span class=\"math\">solution(A_2, 7+3)</span>&nbsp;that is, because we know that there were&nbsp;some numbers in A&nbsp;which could give us a sum of 7, so if I have number 3 with me, there must be some numbers which can give me a sum of 10.</p>\n\n<p>In other words <em>(in general)</em>,</p>\n\n<div class=\"math\">\\color{blue}\\text{solution}(A_n, S) = \\text{solution}(A_{n-1}, S) \\text{ OR } \\text{solution}(A_{n-1}, S-x); \\text{ where } x = A[n]</div>\n\n<p>That is, when looking at the&nbsp;<span class=\"math\">n^{th}</span> number in array which is&nbsp;<span class=\"math\">x</span> , either we already have found numbers which can give a sum of&nbsp;<span class=\"math\">S</span>, or we have found numbers which can give a sum of&nbsp;<span class=\"math\">(S-x)</span>&nbsp;.</p>\n\n<p>Let&#39;s do this from smallest to largest complexity of the problem (by positing an order even if there is no order naturally) i.e. when&nbsp;<span class=\"math\">A</span> is empty and <span class=\"math\">S = 0</span>&nbsp;to&nbsp;<span class=\"math\">A = \\{3, 34, 4, 12, 5, 2\\}</span> and&nbsp; <span class=\"math\">S = 11</span>.</p>\n\n<p><iframe allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"https://www.youtube.com/embed/m3wPWtvGzGM\" width=\"560\"></iframe></p>\n\n<p>In non-technical terms, this method in which identify a smaller form of problem, solve those and then use those solutions to solve the bigger form of the problem is dynamic programming.</p>\n\n<p>Technical description of Dynamic Programming involves terms like Recursion, Optimal Substructure, Optimization.</p>\n\n<p>&nbsp;If a problem can be solved optimally by breaking it into sub-problems and then recursively finding the optimal solutions to the sub-problems, then it is said to have&nbsp;<a href=\"https://en.wikipedia.org/wiki/Optimal_substructure\" target=\"_blank\" title=\"Optimal substructure\">optimal substructure</a>.</p>\n\n<p>Remember: This method can not be applied to solve all problems. Only to those problems which have Optimal substructure.</p>\n\n<p>&nbsp;</p>\n\n<p><strong>Let&#39;s see another problem to verify that above method (or a slight variation) works</strong></p>\n\n<div style=\"background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;\">Given a few numbers e.g.&nbsp;<span class=\"math\">\\{2, 5, 3, 6\\}</span> , you have unlimited supply of coins corresponding to that number i.e. you have an unlimited supply of coins of 2 cents, 3 cents, 5 cents etc. You want to find out in how many ways can&nbsp;you combine these coins to make the change? E.g. to make the change of 10, we can combine them in 5 ways&nbsp;{2,2,2,2,2}, {2,2,3,3}, {2,2,6}, {2,3,5} and {5,5}.</div>\n\n<p><br />\nSo let&#39;s see how to get the solution.</p>\n\n<p>First we will divide the problem, or rather than dividing we will reduce it in size i.e. we will consider smallest possible set of numbers and smallest sum, then we will gradually go towards more complicated example&nbsp;of the problem.</p>\n\n<p><strong>The smallest form of the problem</strong></p>\n\n<div style=\"background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;\"><span class=\"math\">A = \\{2\\}, \\text{ sum }= ?</span>.\n\n<ul>\n\t<li>How many ways are there to make a sum of 1? Answer is 0.</li>\n\t<li>How many ways are there to make a sum of 2? Answer is&nbsp;1 (Just select 2)</li>\n\t<li>How many ways are there to make a sum of 3? Answer is 0.</li>\n\t<li>How many ways are there to make a sum of 4? Answer is&nbsp;1. We can select (2,2)</li>\n</ul>\n</div>\n\n<p><br />\nNow we will add one more element to the set A.<br />\n&nbsp;</p>\n\n<div style=\"background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;\"><span class=\"math\">A = \\{2,1\\}</span>\n\n<ul>\n\t<li>How many ways are there to make a sum of 1? -&gt; 1</li>\n\t<li>How many ways are there to make a sum of 2? -&gt;&nbsp;2 (We can select<br />\n\t(1,1) because we have an unlimited supply of 1<br />\n\t(2) This we already know, we could make this even if there was not 1<br />\n\t)</li>\n\t<li>How many ways are there to make a sum of 3? -&gt; 2&nbsp;(We can select<br />\n\t(2,1) Because we could already make 2, and we can add 1 to it.<br />\n\t(1,1,1)<br />\n\t)</li>\n\t<li>How many ways are there to make a sum of 4? -&gt;&nbsp;3&nbsp;(We can select<br />\n\t(2,2) Because we could already make sum=4 using the previous numbers<br />\n\t(2,1,1) Because we could already make 3 (2+1) from above, and we now have 1 (because there are unlimited 1&#39;s)&nbsp;which we can add to 3<br />\n\t(1,1,1,1)<br />\n\t)</li>\n</ul>\n</div>\n\n<p><br />\nIf we repeat this process, we can soon find that there are two patterns:&nbsp;</p>\n\n<ol>\n\t<li>Because we could already make sum = S&nbsp;using the previous numbers</li>\n\t<li>Because we could already make (S-x)&nbsp; and we now have x&nbsp;(because there are unlimited x&#39;s)&nbsp;which we can add.</li>\n</ol>\n\n<p>This is the mathematical representation of this generalization.</p>\n\n<div class=\"math\">\\color{blue}f(n,S) = f(n-1, S) + f(n, S-x)</div>\n\n<p>where&nbsp;<span class=\"math\">S</span> is the sum,&nbsp;<span class=\"math\">x</span> is the current element (<span class=\"math\">n^{th}</span> element),&nbsp;<span class=\"math\">n</span> is the number of elements (types of coins) we have already considered.</p>\n\n<p>&nbsp;</p>\n\n<hr />\n<p>&nbsp;</p>\n\n<p><strong>The above problem was a simple one, let&#39;s see another problem</strong><br />\n&nbsp;</p>\n\n<div style=\"background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;\">\n<p>Given a boolean expression containing T (True), F (False), and boolean operators: &amp; (And), | (Or), ^ (XOR) only. In many ways does the whole expression evaluate to T(True)?</p>\n\n<p>For example: If given expression is&nbsp;<span class=\"math\">T | T &amp; F ^ T</span>&nbsp;</p>\n\n<pre>\nit evaluates true\nin 4 ways \n((T|T)&amp;(F^T)) \n(T|(T&amp;(F^T))) \n(((T|T)&amp;F)^T) \n(T|((T&amp;F)^T))\n</pre>\n</div>\n\n<p><br />\n<strong>What do we know for sure, without a doubt?</strong></p>\n\n<p>That in how many ways can each of these operators evaluate to True. For example,&nbsp;<span class=\"math\">A &amp; B</span>&nbsp;can be True in only one way - when both of them are <em>True&nbsp;</em>and can be <em>False </em>in 3 ways.</p>\n\n<p>That each operator requires two operands left part and right part. These operands themselves can be complex expressions.</p>\n\n<p><strong>Divide the problem into parts</strong></p>\n\n<p>How can we divide this expression? - By picking an operator and evaluating the left and right part.</p>\n\n<p><strong>What will be the simplest form of the problem?</strong></p>\n<style type=\"text/css\">.exp {\n    color: blue;\n   }\n</style>\n<div style=\"background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;\">\n<p>Only one operator: <span class=\"exp\">A op_1 B&nbsp;</span><br />\nFor example: <span class=\"exp\"> T | T </span><br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; There is only one way to evaluate. There is only one way in which it can evaluate to True.</p>\n</div>\n\n<p><br />\n<strong>How can we gradually ascend towards the solution of a more complex form of the problem?</strong></p>\n\n<div style=\"background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;\">\n<p>&nbsp;If we add another operator to the expression<br />\n<span class=\"exp\">T | T &amp; F </span></p>\n\n<p>In how many ways can this evaluate to True?<br />\nThere are two ways in which we can evaluate this expression</p>\n\n<ol>\n\t<li><span class=\"exp\">T | <em>(everything else)</em> </span><em>&nbsp;[Everything else means</em> ( T &amp; F)<em> here]</em></li>\n\t<li><span class=\"exp\"><em>(everything else)</em> &amp; F </span>&nbsp;<em>[Everything else means </em>(T I&nbsp;T)<em>&nbsp;here]. And we already have solved </em>(T | T)&nbsp;<em>(BUT ONLY FOR TRUE i.e. in how many many ways it evaluates to True)</em></li>\n</ol>\n\n<p>Whether the expression evaluates to True or False depends on whether &quot;everything else&quot; is True or False in both cases.</p>\n\n<p>So we need to not only solve the simpler form of the expression evaluates for&nbsp;True&nbsp;we also need to solve &quot;in how many ways the simpler version solves to False&quot;.</p>\n\n<p><br />\nSo, in how many ways&nbsp;<span class=\"exp\"> T | (<em>everything else</em>)</span> evaluates to True? =&gt; Number of&nbsp;ways&nbsp;<span class=\"exp\">(<em>everything else</em>)</span> evaluates to True + Number of ways&nbsp;<span class=\"exp\">(<em>everything else</em>)</span> evaluates to False, because on the left side we have T (True).</p>\n\n<p>And, in how many ways&nbsp;<span class=\"exp\"><em>(everything else) &amp; F</em></span> evaluates to True? =&gt; Zero, because we have F(False) on the right side.</p>\n\n<p>And, in how many ways&nbsp;<span class=\"exp\">T | (<em>everything else</em>) </span>evaluates to False? =&gt; Zero&nbsp;because on the left side we have T (True).</p>\n\n<p>And, in how many ways&nbsp;<span class=\"exp\"><em>(everything else) &amp; F</em> </span>evaluates to False? =&gt; Number of ways&nbsp;<span class=\"exp\">(<em>everything else</em>)</span> evaluates to True + Number of ways&nbsp;<span class=\"exp\">(<em>everything else</em>)</span> evaluates to False, because we have F(False) on the right side.</p>\n</div>\n\n<p><br />\nLet&#39;s add two more operators to the expression</p>\n\n<div style=\"background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;\">\n<p>If expression is&nbsp;<span class=\"exp\">T | T &amp; F ^ T |&nbsp;F</span>,&nbsp;</p>\n\n<p>we can evaluate this in following ways:-</p>\n\n<p><span class=\"exp\">T | <em>(everything else)</em></span></p>\n\n<p><span class=\"exp\"><em>(everything else on left)</em>&amp; <em>(everything else on right)</em></span></p>\n\n<p>and so on....</p>\n\n<p>So, in how many ways can&nbsp;<span class=\"exp\"><em>(everything else on left)</em> &nbsp;&amp; <em>(everything else on right)&nbsp;</em></span> be evaluated to True?</p>\n\n<p>=&gt; Number of ways in which left side evaluates to True multiplied by Number of ways in which right side evaluates to True.</p>\n\n<p>And in how many ways can <span class=\"exp\"><em>(left side)</em> | <em>(right side)&nbsp;</em></span>evaluate to True?&nbsp;</p>\n\n<p>=&gt; Number of ways in which left side is true multiplied by Number of ways in which right is True or False +&nbsp;Number of ways in which left side is True or False multiplied by Number of ways in which right is True&nbsp;</p>\n</div>\n\n<p><br />\nSo now writing this in general we can say:</p>\n\n<p>To find the solution for given expression, we have to divide the expression at each operator into left and right part. Then find out in how many ways it can evaluate to True, then sum them all.</p>\n\n<p>In process we can use the solution of the parts of the expression (subproblems). Let&#39;s see how in detail...</p>\n\n<p>To be continued...</p>\n\n<p>&nbsp;</p>\n","authorId":null,"subject":"hidden","tags":[""],"img":null,"summary":null,"lastUpdated":"2020-06-03T17:01:42.843+0000"}