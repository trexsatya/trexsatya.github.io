{"name": "Tech Learnings from Experience", "id": 248, "content": "<p>Write tests for each condition, write the extensive, property-based&nbsp;testcase, delete the test case if it is already covered by the logic implemented and you think that the test case doesn&#39;t introduce any new scenario.</p>\n\n<p>Can somthing break if we just renamed a method as part of refactoring?</p>\n\n<p>Yes, one example is if you have mocked using qualified name of code-unit (e.g. done in Python by monkey-patching).</p>\n\n<p>Sometimes even seemingly minor things can cause bigger issues depending on what is the integration with other systems, what kind of data is exchanged and how (and which part of) the data it is utilised by different systems</p>\n\n<p>&nbsp;</p>\n\n<p><strong>Learning from Klarna:</strong><br />\n--------------------</p>\n\n<p>Take care of fundamental things like <strong>Idempotency, ordering requirement</strong>&nbsp;in message consumption, transactions, possibilities of Deadlocks etc.</p>\n\n<p>Take care that when you make changes there might be requests/events being in-transit, you must accomodate for that. Either by a planned downtime or by having logic to handle it. Apart from code it applies to changes with DB as well such as adding indices to DB (takes time).</p>\n\n<p>1. Infrastructure Tooling - immutable deployable artefact.<br />\n2. Security Tooling<br />\n&nbsp;&nbsp; &nbsp;- Exchange secrets securely<br />\n&nbsp;&nbsp; &nbsp;- Don&#39;t store them on workstations<br />\n&nbsp;&nbsp; &nbsp;- Don&#39;t inject prod credentials in buildtime (or anywhere outside prod environment).<br />\n&nbsp;&nbsp; &nbsp;- Make sure to not log secrets<br />\n&nbsp;&nbsp; &nbsp;- Make it easy to rotate secrets<br />\n3. Security Footprint (divide into categories based on criteria such as data-governannce requirements, internet/public exposure, criticality of the system/business etc)<br />\n&nbsp; &nbsp; Perform regular pen-testing for high security systems.<br />\n4. Threat Modelling:<br />\n&nbsp;&nbsp; &nbsp;- Draw visual digram, and/or a formal specification.<br />\n&nbsp;&nbsp; &nbsp;- Find threats.&nbsp;<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;S Spoofing = Someone impersonating an existing user in system.<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;T Tampering = with the in-flight data and thus affecting the system<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;R Repudiation = We should be able to trace back to the perpertrator such that it can prove their malicious activity; and the malicious actor should not be able to manipulate the logs themselves.<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;I Information Disclosure = Enough control over access to data (different categories, different levels, should be easy to revoke access when needed), encryption etc.<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;D Denial of Service = Rate limiting etc, shouldn&#39;t block a genuine user if someone else is retrying on their behalf.<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;E Elevation of Privilege = Multiple levels of access, IAM roles/policies, function-level, object-level authorisation, authorisation mechanism etc.<br />\n5. Security Principles:<br />\n&nbsp;&nbsp; &nbsp;- Trust cautiously, Start with No Trust First, then filter-in (on multiple levels e.g. connection, identity - auth, input, activities/actions)<br />\n&nbsp;&nbsp; &nbsp;- Separate responsibilities, 4-eyed reviews for each critical operation.<br />\n&nbsp;&nbsp; &nbsp;- Defence in depth, no single point of failure.<br />\n&nbsp;&nbsp; &nbsp;- Simple first approach: More complex, harder it is to secure. KISS principle.<br />\n&nbsp;&nbsp; &nbsp;- Record all security significant events in a tamper-resistant store. Monitor and notify suspicious activity (rate limiting in action, signature not matching, unauthorized access to sensitive resources, etc). Review firewall configs, SSL/TLS, HTTPS certificates etc regularly.<br />\n&nbsp;&nbsp; &nbsp;- Secure the weakest link first; Don&#39;t invent security tools, use the proven ones; don&#39;t rely on obsecurity for security; Fail securely;<br />\n6. Take care of well-known threats:<br />\n&nbsp;&nbsp; &nbsp;XSS<br />\n&nbsp;&nbsp; &nbsp;CSP<br />\n&nbsp;&nbsp; &nbsp;XXE<br />\n&nbsp;&nbsp; &nbsp;Domain Takeover Vulnerabilities: Ex. AWS Elastic IP no longer used, but the DNS records still have it. So attacker can use this IP address and all traffic from your domain will be redirected to attacker&#39;s server.<br />\n7. Analyse dependencies/libraries/artifacts for vulnerabilities in a centralised way.<br />\n8. Enforced Verifiable Change Control (some sort of tooling to verify that changes are reviewed, cannot be modified by a single person, an immutable record of what went through deployment)<br />\n9. API Naming convention, restful structure, versioning, pagination etc<br />\n10. Idempotency of operations<br />\n11. Disaster Recovery plans<br />\n12. Testing</p>\n\n<p>&nbsp;</p>\n\n<h1 dir=\"ltr\"><b id=\"docs-internal-guid-e49df892-7fff-d8d9-40d2-830f2ca706bb\">Questions to be asked continuously</b></h1>\n\n<p>These questions should be explored at multiple levels: unit level, module level, service level, system level, inter-system level. It&rsquo;s a repeated process, not a one-time thing.</p>\n\n<p><strong>Technical</strong>:&nbsp;</p>\n\n<p>About Readability, Testability, Maintainability, Extendibility. (Extra focus on readability of the tests)</p>\n\n<p><strong>Functional</strong>:</p>\n\n<p>What can go wrong? What if upstream/downstream messes up? And what are the implications?&nbsp;</p>\n\n<ul>\n\t<li>Loss of information</li>\n\t<li>&nbsp;</li>\n</ul>\n\n<p>How are we preventing the wrong thing? Is it a single point of error/failure, or is there a backup?&nbsp;</p>\n\n<p>How are we verifying the right thing?</p>\n\n<p>How to rectify when things go wrong?</p>\n\n<p>&nbsp;</p>\n\n<p><strong>Testing</strong></p>\n\n<p><strong>Integration Tests:</strong></p>\n\n<p>Give you outside in perspective while doing development. Start with Integration Test in a TDD way, this way you are not tied to the implementation detail, so your refactoring wouldn&#39;t force changes in tests. Combine this with normal TDD steps, so that you get the benefit of design-evolution guided by tests.</p>\n\n<p>Another advantage of integration tests is that you can control any aspect of the system.</p>\n\n<pre>\n<code class=\"language-java\">@SpringBootTest(webEnvironment = DEFINED_PORT, classes = TestConfig.class)\n@EmbeddedKafka\n@ExtendWith({SpringExtension.class, UsePostgreSqlExtension.class})\n@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)\n@ActiveProfiles(\"test\")\n@TestPropertySource(\n        properties = {\n            \"spring.kafka.enabled=true\",\n            \"spring.kafka.bootstrap-servers=${spring.embedded.kafka.brokers}\"\n        })\n\npublic abstract class AbstractIntegrationTest {\n    @BeforeEach\n    void genericSetup() {\n        BDDMockito.reset(EnableSpyBeanPostProcessor.spies.toArray(new Object[] {}));\n    }\n}\n\npublic class UsePostgreSqlExtension implements BeforeAllCallback {\n    public UsePostgreSqlExtension() {\n    }\n\n    public void beforeAll(ExtensionContext context) {\n        PostgresTestContainer.getInstance().start();\n    }\n}\n\n//In the same/parent package where the tests lie\n@TestConfiguration\npublic class TestConfig {}\n\n@Component\npublic class EnableSpyBeanPostProcessor implements BeanPostProcessor {\n    private static final List&lt;Class&lt;?&gt;&gt; beansToSpy = List.of();\n\n    public static List&lt;Object&gt; spies = new ArrayList&lt;&gt;();\n\n    @Override\n    public Object postProcessAfterInitialization(@NotNull Object bean, @NotNull String beanName)\n            throws BeansException {\n        if (beansToSpy.stream().noneMatch(it -&gt; it.isAssignableFrom(bean.getClass()))) return bean;\n        Object b = BeanPostProcessor.super.postProcessAfterInitialization(bean, beanName);\n        Object spy = spy(b);\n        spies.add(spy);\n        return spy;\n    }\n}</code></pre>\n\n<p>&nbsp;</p>\n", "authorId": 1, "subject": "hidden", "tags": [], "img": "", "summary": "", "lastUpdated": "2023-12-27 10:53:40.368137"}