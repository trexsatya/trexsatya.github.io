{"name": "Tech Learnings from Experience", "id": 248, "content": "<p>Write tests for each condition, write the extensive, property-based&nbsp;testcase, delete the test case if it is already covered by the logic implemented and you think that the test case doesn&#39;t introduce any new scenario.</p>\n\n<p>Can somthing break if we just renamed a method as part of refactoring?</p>\n\n<p>Yes, one example is if you have mocked using qualified name of code-unit (e.g. done in Python by monkey-patching).</p>\n\n<p>&nbsp;</p>\n\n<p><strong>Learning from Klarna:</strong><br />\n--------------------</p>\n\n<p>Take care of fundamental things like <strong>Idempotency, ordering requirement</strong>&nbsp;in message consumption, transactions, possibilities of Deadlocks etc.</p>\n\n<p>1. Infrastructure Tooling<br />\n2. Security Tooling<br />\n&nbsp;&nbsp; &nbsp;- Exchange secrets securely<br />\n&nbsp;&nbsp; &nbsp;- Don&#39;t store them on workstations<br />\n&nbsp;&nbsp; &nbsp;- Don&#39;t inject prod credentials in buildtime (or anywhere outside prod environment).<br />\n&nbsp;&nbsp; &nbsp;- Make sure to not log secrets<br />\n&nbsp;&nbsp; &nbsp;- Make it easy to rotate secrets<br />\n3. Security Footprint (divide into categories based on criteria such as data-governannce requirements, internet/public exposure, criticality of the system/business etc)<br />\n&nbsp; &nbsp; Perform regular pen-testing for high security systems.<br />\n4. Threat Modelling:<br />\n&nbsp;&nbsp; &nbsp;- Draw visual digram, and/or a formal specification.<br />\n&nbsp;&nbsp; &nbsp;- Find threats.&nbsp;<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;S Spoofing = Someone impersonating an existing user in system.<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;T Tampering = with the in-flight data and thus affecting the system<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;R Repudiation = We should be able to trace back to the perpertrator such that it can prove their malicious activity; and the malicious actor should not be able to manipulate the logs themselves.<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;I Information Disclosure = Enough control over access to data (different categories, different levels, should be easy to revoke access when needed), encryption etc.<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;D Denial of Service = Rate limiting etc, shouldn&#39;t block a genuine user if someone else is retrying on their behalf.<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;E Elevation of Privilege = Multiple levels of access, IAM roles/policies, function-level, object-level authorisation, authorisation mechanism etc.<br />\n5. Security Principles:<br />\n&nbsp;&nbsp; &nbsp;- Trust cautiously, Start with No Trust First, then filter-in (on multiple levels e.g. connection, identity - auth, input, activities/actions)<br />\n&nbsp;&nbsp; &nbsp;- Separate responsibilities, 4-eyed reviews for each critical operation.<br />\n&nbsp;&nbsp; &nbsp;- Defence in depth, no single point of failure.<br />\n&nbsp;&nbsp; &nbsp;- Simple first approach: More complex, harder it is to secure. KISS principle.<br />\n&nbsp;&nbsp; &nbsp;- Record all security significant events in a tamper-resistant store. Monitor and notify suspicious activity (rate limiting in action, signature not matching, unauthorized access to sensitive resources, etc). Review firewall configs, SSL/TLS, HTTPS certificates etc regularly.<br />\n&nbsp;&nbsp; &nbsp;- Secure the weakest link first; Don&#39;t invent security tools, use the proven ones; don&#39;t rely on obsecurity for security; Fail securely;<br />\n6. Take care of well-known threats:<br />\n&nbsp;&nbsp; &nbsp;XSS<br />\n&nbsp;&nbsp; &nbsp;CSP<br />\n&nbsp;&nbsp; &nbsp;XXE<br />\n&nbsp;&nbsp; &nbsp;Domain Takeover Vulnerabilities: Ex. AWS Elastic IP no longer used, but the DNS records still have it. So attacker can use this IP address and all traffic from your domain will be redirected to attacker&#39;s server.<br />\n7. Analyse dependencies/libraries/artifacts for vulnerabilities in a centralised way.<br />\n8. Enforced Verifiable Change Control (some sort of tooling to verify that changes are reviewed, cannot be modified by a single person, an immutable record of what went through deployment)<br />\n9. API Naming convention, restful structure, versioning, pagination etc<br />\n10. Idempotency of operations<br />\n11. Disaster Recovery plans<br />\n12. Testing</p>\n\n<p>&nbsp;</p>\n", "authorId": 1, "subject": "hidden", "tags": [], "img": "", "summary": "", "lastUpdated": "2023-10-17 11:21:35.172918"}