{"name":"Spring Security","id":175,"content":"<h2>Overview</h2>\n\n<p><strong>What Do We Want To Achieve?</strong></p>\n\n<p>That the bad guys should not be able to use our product, service. Only serve the request if the person, or machine, or the service whatever is making the request <strong>is allowed</strong> to do so.&nbsp;<strong><em>(Authorization)</em></strong></p>\n\n<p>We also want to know who is making this request, which person, machine, service? <strong><em>(Authentication)</em></strong></p>\n\n<p>We also want to ensure that the data they are sending has not been tampered with. <em>(Integrity)</em></p>\n\n<p><strong>What are the options?</strong></p>\n\n<h4>HTTP(S) Basic Authentication.&nbsp;</h4>\n\n<p style=\"margin-left: 40px;\">In this client (requestor)&nbsp;will supply `username:password` in the request header (header name: Authorization). This must be supplied with each request if it is stateless (sessionless) service like REST API.</p>\n\n<pre>\n<code class=\"language-bash\">$ curl \"https://$username:$password@myhost/resource\"</code></pre>\n\n<h4><br />\nHTTPS with Certificate</h4>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; In this client will supply certificate and password while making request.</p>\n\n<pre>\n<code class=\"language-bash\">$ curl -k --cert rod.pem:password https://localhost:8443/hello\n</code></pre>\n\n<h4><br />\nJWT Tokens</h4>\n\n<p style=\"margin-left: 40px;\">JWT is a standard specification for exchanging information between parties. It&#39;s like basic authentication but with a temporary password.</p>\n\n<p style=\"margin-left: 40px;\">JWT Tokens have three parts separated by dot: Header, Payload, Signature.</p>\n\n<p style=\"margin-left: 40px;\">The requestor will first need to get a token from an auth-service, then send that token in the request to other services. These tokens are self-sufficient and do not need any data store to verify that they are valid. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the <strong>HMAC</strong> algorithm) or a public/private key pair using <strong>RSA</strong> or <strong>ECDSA</strong>. JWTs can be encrypted to also provide secrecy between parties When tokens are signed using public/private key pairs, the signature also certifies that only the party holding the private key is the one that signed it. Visit <a href=\"https://jwt.io/introduction/\" target=\"_blank\">JWT.IO</a></p>\n\n<pre>\n<code class=\"language-javascript\">HMACSHA256(\n  base64UrlEncode(header) + \".\" +\n  base64UrlEncode(payload),\n  secret)\n//To create signature you can use different algorithms available.</code></pre>\n\n<pre>\n<code class=\"language-bash\">$ curl -H \"Authorization: Bearer $TOKEN\" https://myhost/resource\n</code></pre>\n\n<h4>OAuth2</h4>\n\n<p style=\"margin-left: 40px;\">This is the strongest. OAuth is actually a specification which uses JWT. It&#39;s a standardized way of using Authentication Tokens to faciliate security. It provides you with a way to differentiate between user and machine. Clients (e.g. mobile devices) do not have to store the username, password. Token may contain extra info apart from user identity.&nbsp;Example of implementation (from Cloud Foundry UAA, JWT = signed, base64-encoded, JSON):</p>\n\n<pre>\n<code data-lang=\"text\">  {  \n    \"client_id\":\"cf\",\n    \"exp\":1346325625,\n    \"scope\":[\"cloud_controller.read\",\"openid\",\"password.write\"],\n    \"aud\":[\"openid\",\"cloud_controller\",\"password\"],\n    \"iss\": \"https://login.run.pivotal.io\",\n    \"user_name\":\"tester@vmware.com\",\n    \"user_id\":\"52147673-9d60-4674-a6d9-225b94d7a64e\",\n    \"email\":\"tester@vmware.com\",\n    \"jti\":\"f724ae9a-7c6f-41f2-9c4a-526cea84e614\" \n  }</code></pre>\n\n<p>To make a successful request, you&#39;d have to pass the token.</p>\n\n<pre>\n<code class=\"language-bash\">$ curl -H \"Authorization: Bearer $TOKEN\" https://myhost/resource\n</code></pre>\n\n<p>See the details of OAuth below.</p>\n\n<h2><br />\nSpring Security Architecture in Very&nbsp; Brief</h2>\n\n<p>&nbsp;<img alt=\"\" src=\"/images/spring-security-core.png\" style=\"width: 600px; height: 320px;\" /></p>\n\n<pre>\n<code class=\"language-java\">public interface AuthenticationManager {\n   Authentication authenticate(Authentication authentication) throws AuthenticationException;\n}\n\npublic interface AuthenticationProvider {\n  boolean supports(Class&lt;?&gt; authentication);\n  Authentication authenticate(Authentication authentication) throws AuthenticationException;\n}</code></pre>\n\n<p>These interfaces are main things in Spring security. <code>AuthenticationManager</code> consults a number of <code>AuthenticationProvider</code>&#39;s to see whether they can authenticate the requesting user.</p>\n\n<p>&nbsp;<code>Authentication</code> represents someone who tries to log in. In Spring security we need to convert <code>Authentication</code> into <code>UserDetails</code> which represents a real world user. <code>UserDetails</code> has informations like username, password, authorities, whether account is locked / expired etc. <code>Authentication</code> object contains principal (i.e username in most cases), credentials (i.e. password in most cases), authorities (roles).&nbsp;</p>\n\n<p>Spring provides you with a typical and useful implementation of <code>AuthenticationProvider</code>, which is <code>DaoAuthenticationProvider</code>, you just need to implement&nbsp;<code>UserDetailsService</code> interface and pass it to this provider.&nbsp;</p>\n\n<p><img alt=\"\" src=\"/images/spring-security-web.png\" style=\"width: 600px; height: 310px;\" /></p>\n\n<p>To bring Spring security in action, we need to create a <code>WebSecurity</code> which further creates a <code>FilterChainProxy</code> bean (with name springSecurityFilterChain), this bean consults a number of <code>SecurityFilterChain&#39;</code>s. Spring by default creates and registers a&nbsp; <code>DefaultSecurityFilterChain</code> object which has many <code>Filter</code> objects that process the incoming web request.&nbsp;</p>\n\n<p>But you do not have to create&nbsp;<code>WebSecurity</code>&nbsp;by yourself and register <code>SecurityFilterChain</code>&#39;s, at least not in typical use cases. Spring creates these objects for you, and provides you an easy way to customize these through Adapter classes.</p>\n\n<pre>\n<code class=\"language-java\">@Component\npublic class SecConfig extends WebSecurityConfigurerAdapter {\n    @Override\n    public void configure(WebSecurity web) throws Exception {\n        super.configure(web);\n    }\n}</code></pre>\n\n<p>This adapter also allows you to configure <code>HttpSecurity</code> which is used to determine which URLs should be protected and which ones whould be ignored etc. The API itself is quite explainatory.</p>\n\n<pre>\n<code class=\"language-java\">protected void configure(HttpSecurity http) throws Exception {\n    http\n        .authorizeRequests()\n            .anyRequest().authenticated()\n            .and()\n        .formLogin()\n            .and()\n        .httpBasic();\n}</code></pre>\n\n<p><code>HttpSecurity</code>&nbsp;can also be used to configure what kind of roles are required for a particular URL to be accessed (for authorization).</p>\n\n<h2>How to Secure a Web Application with Spring Security?</h2>\n\n<p>If you are using Spring Boot it is very simple:</p>\n\n<pre>\n<code class=\"language-java\">@SpringBootApplication\n@EnableWebSecurity(debug = true)\npublic class SpringBootApp {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBootApp.class, args);\n    }\n\n    @Bean\n    public UserDetailsService userDetailsService() throws Exception {\n        InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();\n\n        UserDetails user = User.withUsername(\"user\").password(\"pass\").roles(\"USER\").build();\n        manager.createUser(user);\n        return manager;\n    }\n}</code></pre>\n\n<p>This is all. But it will protect all URLs and present you with a <em><strong>default</strong></em> login page, when you try to access even the root URL (homepage). If you do not want that, you can customize by extending <code>WebSecurityConfigurerAdapter</code>&nbsp;and configuring <code>HttpSecurity</code>.&nbsp; For details on the API to customize read this documentation:&nbsp;<a href=\"https://docs.spring.io/spring-security/site/docs/4.2.4.RELEASE/apidocs/org/springframework/security/config/annotation/web/builders/HttpSecurity.html\" target=\"_blank\">HttpSecurity Documentation</a></p>\n\n<p>If you are not using Spring Boot,&nbsp;</p>\n\n<p><strong>If you have web.xml in your project</strong></p>\n\n<p>Add the following to web.xml</p>\n\n<pre>\n<code class=\"language-xhtml\">   &lt;!-- Spring MVC --&gt;\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;mvc&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet\n          &lt;/servlet-class&gt;\n        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n    &lt;/servlet&gt;\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;mvc&lt;/servlet-name&gt;\n        &lt;url-pattern&gt;/&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;\n \n    &lt;context-param&gt;\n        &lt;param-name&gt;contextClass&lt;/param-name&gt;\n        &lt;param-value&gt;\n          org.springframework.web.context.support.AnnotationConfigWebApplicationContext\n        &lt;/param-value&gt;\n    &lt;/context-param&gt;\n    &lt;context-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;my.package.with.spring.configs&lt;/param-value&gt;\n    &lt;/context-param&gt;\n    &lt;listener&gt;\n        &lt;listener-class&gt;\n          org.springframework.web.context.ContextLoaderListener\n        &lt;/listener-class&gt;\n    &lt;/listener&gt;</code></pre>\n\n<pre>\n<code class=\"language-xhtml\">    &lt;filter&gt;\n        &lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;\n        &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy\n          &lt;/filter-class&gt;\n    &lt;/filter&gt;\n    &lt;filter-mapping&gt;\n        &lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;\n        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n    &lt;/filter-mapping&gt;</code></pre>\n\n<p>The filter &ndash;&nbsp;<em>DelegatingFilterProxy</em>&nbsp;&ndash; &nbsp;delegates to a Spring managed bean (instance of&nbsp; <code>FilterChainProxy</code>) named &#39;springSecurityFilterChain&#39; (same name as this filter). The further steps are similar to as for Spring Boot application: just extend&nbsp;<code>WebSecurityConfigurerAdapter</code>&nbsp;and customize the defaults.</p>\n\n<p><strong>If you do not have web.xml in your project</strong>:</p>\n\n<pre>\n<code class=\"language-java\">class SpringSecurityInitializer extends AbstractSecurityWebApplicationInitializer {\n    //This will automatically add springSecurityFilterChain bean\n}\n\npublic class AppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {\n \n   @Override\n   protected Class&lt;?&gt;[] getRootConfigClasses() {\n      return new Class[] { MyConfig.class, MySecurityConfig.class };\n   }\n \n   @Override\n   protected Class&lt;?&gt;[] getServletConfigClasses() {\n      return new Class[] { MyWebMvcConfig.class };\n   }\n \n   @Override\n   protected String[] getServletMappings() {\n      return new String[] { \"/\" };\n   }\n}\n//MyConfig.java MyWebMvcConfig.java MySecurityConfig.java are your configuration classes</code></pre>\n\n<p>Basically the same thing that is done by web.xml is done by Java code here.</p>\n\n<p>&nbsp;</p>\n\n<p>For more details, please refer to the official documentation which is in very good shape.&nbsp;<a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#abstractsecuritywebapplicationinitializer-without-existing-spring\" target=\"_blank\">Spring Security Documentation</a></p>\n\n<h2>OAuth2</h2>\n\n<p>OAuth is strongest way of authorization. For implmenting OAuth, there need&nbsp;to be two components: Authorization Server, Resource Server(s). Microservices could be seen as resource servers.&nbsp;</p>\n\n<p>OAuths handles different clients (anything that requests something) in different way. There can be different sort of clients:</p>\n\n<ul>\n\t<li>Confidential clients (these can store client secret; e.g. web servers)</li>\n\t<li>Public clients (these can&#39;t store client secret/password because they are prone to be hijacked; e.g. mobile apps, browsers)</li>\n</ul>\n\n<p>Here&#39;s a typical flow in oauth2:</p>\n\n<ul>\n\t<li>User (U) opens the application X&nbsp;and connects to some application/service Y (e.g. Facebook) to use some of their resources (e.g. name, profile pic).&nbsp;</li>\n\t<li>Application X makes authorization request to Y, which presents with a page that is shown to user U. User confirms that they want application Y to provide resources desired. Application Y sends an <strong>authorization code plus authorization grant</strong> to the application X.</li>\n\t<li>Application X sends this&nbsp;authorization code plus authorization grant to application Y. Application Y sends an access token after verification.</li>\n\t<li>Now Application X can make the request to application Y for resources like name, profile pic. It has to pass the access token.</li>\n\t<li>&nbsp;</li>\n\t<li>Application Y needs to know about application X to perform all this. So, application X has to register itself first. After registration application Y sends {clientId, clientSecret} to X.</li>\n</ul>\n\n<pre>\n<code class=\"language-bash\">\n$ curl /oauth2/token -X POST -H 'Authorization: Basic &lt;base-64 string&gt;' -d 'grant_type=client_credentials'\n//{ \"token_type\": \"bearer\", \"expires_in\": 10000, \"access_token\": \"....\"}</code></pre>\n\n<p style=\"margin-left: 40px;\">If the user trusts the client and can provide the username, password; then the client can simply ask for token using</p>\n\n<pre>\n<code class=\"language-bash\">curl /oauth2/token -X POST -H 'Authorization: Basic &lt;base-64 string&gt;' -d 'grant_type=password&amp;username=&lt;&gt;&amp;password=&lt;&gt;'</code></pre>\n\n<p>Implicit grant type:</p>\n\n<pre>\n<code class=\"language-bash\">$ curl /oauth2/authorize?responsetype=token&amp;client_id=&amp;redirect_uri=&lt;&gt;</code></pre>\n\n<p>Directly request for the access token. This is generally not desired and hence not supported.</p>\n\n<h2>Using OAuth with Spring Security</h2>\n\n<p>You will need an <em><strong>OAuth Provider</strong></em> (It is better to use existing ones e.g. Google OAuth, Github OAuth instead of creating one).&nbsp;</p>\n\n<p>To use OAuth provider you need to go to their oauth console and setup an account and a project. Providers generally have good documentation on how to use their OAuth service. To use Google OAuth visit&nbsp;<a href=\"https://developers.google.com/identity/protocols/OpenIDConnect\" target=\"_blank\">https://developers.google.com/identity/protocols/OpenIDConnect</a></p>\n\n<p>You will be acting as <strong><em>OAuth Client</em></strong>, users will login using Google and then give their consent that you as a <em><strong>OAuth Client</strong></em> can use some of their info.&nbsp;</p>\n\n<p>We will use Spring Boot to create OAuth application.</p>\n\n<p>Configure Boot application like this in file <code>application.yml</code>&nbsp;</p>\n\n<pre>\n<code class=\"language-java\">spring:\n  security:\n    oauth2:\n      client:\n        registration:   \n          google:   #ID for Client Registration\n            client-id: &lt;google-client-id&gt;\n            client-secret: &lt;google-client-secret&gt;</code></pre>\n\n<p>You will get the value of google-client-id and google-client-secret while you are setting up OAuth on Provider&#39;s page.</p>\n\n<p>Then just configure&nbsp;<code>WebSecurityConfigurerAdapter</code>.</p>\n\n<pre>\n<code class=\"language-java\">    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests()\n         .anyRequest().authenticated()\n         .and()\n         .oauth2Login();\n    }</code></pre>\n\n<p><code>ClientRegistration</code>&nbsp;&nbsp; has all the information relevant to OAuth Client like these:</p>\n\n<table border=\"0\" summary=\"Callout list\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td align=\"left\" valign=\"top\" width=\"5%\">\n\t\t\t<p><a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#CO6-1\"><img alt=\"1\" border=\"0\" src=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/images/callouts/1.png\" /></a></p>\n\t\t\t</td>\n\t\t\t<td align=\"left\" valign=\"top\">\n\t\t\t<p><code>registrationId</code>: The ID that uniquely identifies the&nbsp;<code>ClientRegistration</code>.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td align=\"left\" valign=\"top\" width=\"5%\">\n\t\t\t<p><a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#CO6-2\"><img alt=\"2\" border=\"0\" src=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/images/callouts/2.png\" /></a></p>\n\t\t\t</td>\n\t\t\t<td align=\"left\" valign=\"top\">\n\t\t\t<p><code>clientId</code>: The client identifier.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td align=\"left\" valign=\"top\" width=\"5%\">\n\t\t\t<p><a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#CO6-3\"><img alt=\"3\" border=\"0\" src=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/images/callouts/3.png\" /></a></p>\n\t\t\t</td>\n\t\t\t<td align=\"left\" valign=\"top\">\n\t\t\t<p><code>clientSecret</code>: The client secret.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td align=\"left\" valign=\"top\" width=\"5%\">\n\t\t\t<p><a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#CO6-4\"><img alt=\"4\" border=\"0\" src=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/images/callouts/4.png\" /></a></p>\n\t\t\t</td>\n\t\t\t<td align=\"left\" valign=\"top\">\n\t\t\t<p><code>clientAuthenticationMethod</code>: The method used to authenticate the Client with the Provider. The supported values are&nbsp;<strong>basic</strong>&nbsp;and&nbsp;<strong>post</strong>.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td align=\"left\" valign=\"top\" width=\"5%\">\n\t\t\t<p><a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#CO6-5\"><img alt=\"5\" border=\"0\" src=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/images/callouts/5.png\" /></a></p>\n\t\t\t</td>\n\t\t\t<td align=\"left\" valign=\"top\">\n\t\t\t<p><code>authorizationGrantType</code>: The OAuth 2.0 Authorization Framework defines four&nbsp;<a href=\"https://tools.ietf.org/html/rfc6749#section-1.3\" target=\"_top\">Authorization Grant</a>&nbsp;types. The supported values are authorization_code and implicit.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td align=\"left\" valign=\"top\" width=\"5%\">\n\t\t\t<p><a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#CO6-6\"><img alt=\"6\" border=\"0\" src=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/images/callouts/6.png\" /></a></p>\n\t\t\t</td>\n\t\t\t<td align=\"left\" valign=\"top\">\n\t\t\t<p><code>redirectUriTemplate</code>: The client&rsquo;s registered redirect URI that the&nbsp;<em>Authorization Server</em>&nbsp;redirects the end-user&rsquo;s user-agent to after the end-user has authenticated and authorized access to the client. The default redirect URI template is&nbsp;<code>{baseUrl}/login/oauth2/code/{registrationId}</code>, which supports URI template variables.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td align=\"left\" valign=\"top\" width=\"5%\">\n\t\t\t<p><a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#CO6-7\"><img alt=\"7\" border=\"0\" src=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/images/callouts/7.png\" /></a></p>\n\t\t\t</td>\n\t\t\t<td align=\"left\" valign=\"top\">\n\t\t\t<p><code>scopes</code>: The scope(s) requested by the client during the Authorization Request flow, such as openid, email, or profile.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td align=\"left\" valign=\"top\" width=\"5%\">\n\t\t\t<p><a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#CO6-8\"><img alt=\"8\" border=\"0\" src=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/images/callouts/8.png\" /></a></p>\n\t\t\t</td>\n\t\t\t<td align=\"left\" valign=\"top\">\n\t\t\t<p><code>clientName</code>: A descriptive name used for the client. The name may be used in certain scenarios, such as when displaying the name of the client in the auto-generated login page.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td align=\"left\" valign=\"top\" width=\"5%\">\n\t\t\t<p><a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#CO6-9\"><img alt=\"9\" border=\"0\" src=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/images/callouts/9.png\" /></a></p>\n\t\t\t</td>\n\t\t\t<td align=\"left\" valign=\"top\">\n\t\t\t<p><code>authorizationUri</code>: The Authorization Endpoint URI for the Authorization Server.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td align=\"left\" valign=\"top\" width=\"5%\">\n\t\t\t<p><a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#CO6-10\"><img alt=\"10\" border=\"0\" src=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/images/callouts/10.png\" /></a></p>\n\t\t\t</td>\n\t\t\t<td align=\"left\" valign=\"top\">\n\t\t\t<p><code>tokenUri</code>: The Token Endpoint URI for the Authorization Server.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td align=\"left\" valign=\"top\" width=\"5%\">\n\t\t\t<p><a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#CO6-11\"><img alt=\"11\" border=\"0\" src=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/images/callouts/11.png\" /></a></p>\n\t\t\t</td>\n\t\t\t<td align=\"left\" valign=\"top\">\n\t\t\t<p><code>jwkSetUri</code>: The URI used to retrieve the&nbsp;<a href=\"https://tools.ietf.org/html/rfc7517\" target=\"_top\">JSON Web Key (JWK)</a>&nbsp;Set from the Authorization Server, which contains the cryptographic key(s) used to verify the&nbsp;<a href=\"https://tools.ietf.org/html/rfc7515\" target=\"_top\">JSON Web Signature (JWS)</a>&nbsp;of the ID Token and optionally the UserInfo Response.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td align=\"left\" valign=\"top\" width=\"5%\">\n\t\t\t<p><a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#CO6-12\"><img alt=\"12\" border=\"0\" src=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/images/callouts/12.png\" /></a></p>\n\t\t\t</td>\n\t\t\t<td align=\"left\" valign=\"top\">\n\t\t\t<p><code>(userInfoEndpoint)uri</code>: The UserInfo Endpoint URI used to access the claims/attributes of the authenticated end-user.</p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td align=\"left\" valign=\"top\" width=\"5%\">\n\t\t\t<p><a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#CO6-13\"><img alt=\"13\" border=\"0\" src=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/images/callouts/13.png\" /></a></p>\n\t\t\t</td>\n\t\t\t<td align=\"left\" valign=\"top\">\n\t\t\t<p><code>userNameAttributeName</code>: The name of the attribute returned in the UserInfo Response that references the Name or Identifier of the end-user.</p>\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>When you place entries in application.yml, ClientRegistration instances are created for each registrationId and stored with&nbsp;<code>ClientRegistrationRepository</code> (<code>InMemoryClientRegistrationRepository</code> by default)</p>\n\n<p><code>CommonOAuth2Provider </code>which is auto-registered in Spring Boot app, has general informations regarding data required for ClientRegistration (since they do not generally change for Providers), when you specified &#39;google&#39; as clientId, Spring Boot matches it to&nbsp;<code>GOOGLE</code> enum in&nbsp;<code>CommonOAuth2Provider</code> and populates default client registration data.</p>\n\n<p>Spring Boot also auto-registers a&nbsp;<code>OAuth2AuthorizedClientService</code>.&nbsp;</p>\n\n<p>To customize we can</p>\n\n<ul>\n\t<li><a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#jc-oauth2login-register-clientregistrationrepository-bean\" title=\"Register a ClientRegistrationRepository @Bean\">Register a&nbsp;<code>ClientRegistrationRepository</code>&nbsp;<code>@Bean</code></a></li>\n\t<li><a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#jc-oauth2login-provide-websecurityconfigureradapter\" title=\"Provide a WebSecurityConfigurerAdapter\">Provide a&nbsp;<code>WebSecurityConfigurerAdapter</code></a></li>\n\t<li><a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#jc-oauth2login-completely-override-autoconfiguration\" title=\"Completely Override the Auto-configuration\">Completely Override the Auto-configuration</a></li>\n</ul>\n\n<p>To use OAuth without Spring Boot:</p>\n\n<pre>\n<code class=\"language-java\">@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    http.authorizeRequests().anyRequest().authenticated()\n      .and()\n      .oauth2Login()\n      .clientRegistrationRepository(clientRegistrationRepository())\n      .authorizedClientService(authorizedClientService());\n}\n \n@Bean\npublic OAuth2AuthorizedClientService authorizedClientService() {\n  \n    return new InMemoryOAuth2AuthorizedClientService(\n      clientRegistrationRepository());\n}</code></pre>\n\n<p>&nbsp;</p>\n","authorId":null,"subject":"linked-to-136","tags":null,"img":null,"summary":null,"lastUpdated":"2018-10-02T18:42:42.917+0000"}