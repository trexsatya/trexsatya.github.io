{"name":"Responsive Web Design","id":165,"content":"<p><strong>Adaptive vs Responsive: </strong></p>\n\n<p>In responsive, the UI changes as the window (of browser) size changes. In Adaptive, the UI just adapts to certain sizes.</p>\n\n<p><strong>Flow:</strong></p>\n\n<p>&nbsp;</p>\n\n<p><strong>Relative Units of Measurement:</strong></p>\n\n<p>Don&#39;t use pixel values.</p>\n\n<p>Use %, vw, vh, em, rem</p>\n\n<p><strong>Breakpoints:</strong></p>\n\n<p>Are predefined areas of measurement that allow you to rearrange layout based on the size of the browser window.</p>\n\n<p><strong>Max, Min Values:</strong></p>\n\n<p>&nbsp;</p>\n\n<p><strong>Containers and Nested Objects</strong></p>\n\n<p>&nbsp;</p>\n\n<p><strong>Use System Fonts vs WebFonts</strong></p>\n\n<p>&nbsp;</p>\n\n<p>Scss and Sass:</p>\n\n<p>Inside Vue component:</p>\n\n<p>To compile our&nbsp;<code>&lt;style&gt;</code>&nbsp;tag with Sass/SCSS:</p>\n\n<pre>\n<code>npm install -D sass-loader node-sass</code></pre>\n\n<p>In your webpack config:</p>\n\n<pre>\n<code>module.exports = {\n  module: {\n    rules: [\n      // ... other rules omitted\n\n      // this will apply to both plain `.scss` files\n      // AND `&lt;style lang=\"scss\"&gt;` blocks in `.vue` files\n      {\n        test: /\\.scss$/,\n        use: [\n          'vue-style-loader',\n          'css-loader',\n          {\n      loader: 'sass-loader',\n      options: {\n        indentedSyntax: true,\n        // sass-loader version &gt;= 8\n        sassOptions: {\n          indentedSyntax: true\n        }\n      }\n    }\n        ]\n      }\n    ]\n  },\n  // plugin omitted\n}\n</code></pre>\n\n<p>Now in addition to being able to&nbsp;<code>import &#39;style.scss&#39;</code>, we can use SCSS in Vue components as well:</p>\n\n<pre>\n<code>&lt;style lang=\"scss\"&gt;\n/* write SCSS here */\n&lt;/style&gt;\n</code></pre>\n\n<p>Any content inside the block will be processed by webpack as if it&#39;s inside a&nbsp;<code>*.scss</code>&nbsp;file.</p>\n\n<p>&nbsp;</p>\n\n<p>VueJS Project:</p>\n\n<p><a href=\"https://babeljs.io/\" target=\"_blank\">BabelJS</a></p>\n\n<p>Translates your code into standard JS understandable by browsers. Provides cool features which have been missing from the JS language.</p>\n\n<p>Babel is a toolchain that is mainly used to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments. Here are the main things Babel can do for you:</p>\n\n<ul>\n\t<li>Transform syntax</li>\n\t<li>Polyfill features that are missing in your target environment (through&nbsp;<a href=\"https://babeljs.io/docs/en/babel-polyfill\">@babel/polyfill</a>)</li>\n\t<li>Source code transformations (codemods)</li>\n\t<li>And more! (check out these&nbsp;<a href=\"https://babeljs.io/videos.html\">videos</a>&nbsp;for inspiration)</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p>Babel is built out of plugins. Compose your own transformation pipeline using existing plugins or write your own. Easily use a set of plugins by using or creating a&nbsp;<a href=\"https://babeljs.io/docs/en/plugins#presets\">preset</a>.&nbsp;<a href=\"https://babeljs.io/docs/en/plugins\">Learn more &rarr;</a></p>\n\n<p>Create a plugin on the fly with&nbsp;<a href=\"https://astexplorer.net/#/KJ8AjD6maa\">astexplorer.net</a>&nbsp;or use&nbsp;<a href=\"https://github.com/babel/generator-babel-plugin\">generator-babel-plugin</a>&nbsp;to generate a plugin template.</p>\n\n<p>A plugin is just a function.</p>\n\n<p>Babel also translates <a href=\"https://www.typescriptlang.org/docs/handbook/jsx.html\" target=\"_blank\">JSX</a> syntax into JS. Vue JSX is bit different from ReactJSX.&nbsp;<a href=\"https://github.com/vuejs/babel-plugin-transform-vue-jsx\">https://github.com/vuejs/babel-plugin-transform-vue-jsx</a></p>\n\n<p>&nbsp;</p>\n\n<p>VueX State Management:</p>\n\n<p>Single&nbsp; (in-memory) Datastore for whole application.</p>\n\n<p>You can modularize it though.</p>\n\n<p>If the data in store changes, everywhere the data has been used, the change is pushed.</p>\n\n<p>Whenever&nbsp;<code>store.state.xxx</code>&nbsp;changes, it will cause the computed property to re-evaluate, and trigger associated DOM updates.</p>\n\n<p>Instead of creating methods to access data from datastore, you could use mapState function to automatically create getters.</p>\n\n<p>Components can have local state as well.</p>\n\n<p>&nbsp;</p>\n\n<p>Vue components as TypeScript classes</p>\n\n<p><a href=\"https://class-component.vuejs.org/\">https://class-component.vuejs.org/</a></p>\n\n<p>@Component makes your class a Vue component</p>\n\n<p>Simply initializing data makes it a member&nbsp;</p>\n\n<pre>\n<code>message = 'Hello World!' //Must not be undefined, otherwise changes to data would not reflect\n</code></pre>\n\n<p>Methods can be declared directly.</p>\n\n<p>Computed getters and setters should be declared by&nbsp;</p>\n\n<pre>\n<code>  get name() {\n    return this.firstName + ' ' + this.lastName\n  }\n\n  // Declared as computed property setter\n  set name(value) {\n    //....\n  }</code></pre>\n\n<p>VueJS lifecycle methods can also be declared.</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n","authorId":null,"subject":"hidden","tags":null,"img":null,"summary":null,"lastUpdated":"2020-05-23T12:49:05.454+0000"}