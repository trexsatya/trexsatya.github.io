{"name":"Real Time Communication","id":128,"content":"<p><strong>The Problem:</strong> You need to establish bi-directional connection, where someone can subscribe to the data they are interested and any change/arrival of data will be notified to them. The system needs to be efficient, resilient, fault-tolerant. Usage Scenarios: Chat applications, Multiplayer games, Financial applications in which they show live prices, stocks etc.</p>\n\n<p><strong><span style=\"color:#8e44ad;\">Propietary Solutions:&nbsp;</span></strong></p>\n\n<p>&nbsp; &nbsp; &nbsp; &nbsp;<a href=\"https://www.caplin.com/developer/component/liberator\">Caplin Liberator</a>,&nbsp;<a href=\"https://kaazing.com/\">Kaazing</a>,&nbsp;<a href=\"http://lightstreamer.com/\">Light Streamer</a>&nbsp;or&nbsp;<a href=\"http://migratorydata.com/\">Migratory Data</a>&nbsp;- mostly used in banking and financial trading.</p>\n\n<p><span style=\"color:#8e44ad;\"><strong>Platform As Service Solutions:</strong></span></p>\n\n<p>&nbsp; &nbsp; &nbsp;&nbsp;<a href=\"https://pusher.com/\">Pusher</a>,&nbsp;<a href=\"https://www.pubnub.com/\">PubNub</a>,&nbsp;<a href=\"https://www.firebase.com/\">Firebase</a>,&nbsp;<a href=\"https://framework.realtime.co/messaging/\">realtime.co</a>&nbsp;or soon&nbsp;<a href=\"https://deepstreamhub.com/\">deepstreamHub</a>.&nbsp;</p>\n\n<p><span style=\"color:#8e44ad;\"><strong>Open Source Solutions:</strong></span></p>\n\n<p>&nbsp; &nbsp; Not any highly popular open source Java solution is there.</p>\n\n<h2>How To Implement Real Time Communication in Java?</h2>\n\n<p>Using some proprietary solution</p>\n\n<p>Using NIO</p>\n\n<p>Using some MOM solution, e.g Apache ActiveMQ</p>\n\n<h2>Typical Caplin Workflow</h2>\n\n<p>Caplin is a high-performance web streaming server. Caplin provides a&nbsp;StreamLink client API so that any kind of client can work with it.</p>\n\n<p>Caplin&#39;s core concept is DataSource. It provides 3 types of DataSource&#39;s Liberator, Transformer, and Integration-Adapters. To connect to external applications/sources-of-data you implement your own Integration-Adapters and configure Transformer and Liberator to connect to them. Any DataSource application can connect to any other DataSource application.</p>\n\n<p>Liberator Functionalities: Streaming service (clients must use StreamLink api), HTTP service, throttling and batching configurations, permissioning configurations, Clustering, Resilience failover, Ready to use setups (called blades), Monitoring/Management, Diagnostice application.</p>\n\n<p>Transformer Functionalities: Transformer consumes data from other DataSource applications including Integration-Adapters and Liberator, extracts incoming data, sends to Transformer appropritate modules which then do the actual transformation (caching is used), the transformed data is sent to DB or sent back to Data-Source applications (including other Transformers).<br />\nTransformer modules can be written in Javascript, Java or Lua, or even C.&nbsp;<br />\nExample functionality of a Transformer module: Calculate <strong>spread</strong>&nbsp;using bid and ask prices and set it as a new field in price data object.</p>\n\n<p>You do not need to write Integration Adapters all by yourself, just use any template provided by Caplin Integration Suite and customize it as per your needs.</p>\n\n<p>You can find the templates on Github, they are well documented. <a href=\"https://github.com/caplin/project-templates/tree/master/trading-template\" target=\"_blank\">Here</a>.</p>\n\n<p>Caplin&#39;s DataSource API is used both for subscription and for publishing/providing data. Its active subsciption model allows clients to just provide the subscription details (they don&#39;t have to know a channel name), Integration-Adapter&nbsp;creates a custom data stream dynamically and sends it to Liberator and hence to client.</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n","authorId":null,"subject":"hidden","tags":null,"img":"/images/real_time.jpg","summary":"There are many ways in which you can establish bi-directional communication that happens in real time. It is used in chatting, banking/trading etc","lastUpdated":"2018-09-28T02:27:28.205+0000"}