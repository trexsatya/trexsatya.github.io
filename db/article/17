{"name":"Build Tools -  Maven","id":17,"content":"<p><span style=\"color:#8e44ad;\"><strong>Why do we use tools like Maven and Gradle?</strong></span></p>\n\n<p><strong>Simple Answer</strong>: it makes working with project easier, you wouldn&#39;t have to repetitive tasks involved in building executable from project.</p>\n\n<p><strong>Technical Answer</strong>: Following is the basic and&nbsp;typical workflow that we need to do repeatedly in our projects in order to create some executable application. Here we have taken an example of Java project (<em>created in IntelliJ IDE</em>), for which the output executable application will be a JAR file. We have source code in &quot;<em>src</em>&quot; folder. Our source code depends on other JAR libraries which need to be on classpath in order to compile our source code.</p>\n\n<p>So how does Maven help here?</p>\n\n<ol>\n\t<li>Just create a <strong><em>pom.xml</em></strong> file. In this file declare groupId, artifactId, and version. These three things make a unique identifier for the output JAR file.&nbsp;</li>\n\t<li>Add dependencies in pom.xml file. Dependencies also need to be identified by groupId, artifactId, version.</li>\n\t<li>Run maven command &#39;<em>package</em>&#39;. It will download all the JAR libraries, add them to classpath, compile your .java files into .class files. Place them inside <em>target/classes</em> folder. Create a JAR file inside <em>target</em> folder. To make things faster in future Maven also caches the downloaded JARs inside a local repository folder ( ~/<em>.m2/repository</em> folder by default).&nbsp;</li>\n</ol>\n\n<p>&nbsp; &nbsp; &nbsp; Refer to this link to know what can go into pom.xml file:&nbsp; &nbsp;<a href=\"https://maven.apache.org/pom.html\" target=\"_blank\">https://maven.apache.org/pom.html</a></p>\n\n<p><img alt=\"\" src=\"/images/maven1.png\" style=\"width: 600px; height: 344px;\" /></p>\n\n<p><strong>Is this all that Maven does?</strong></p>\n\n<p>No. Maven can do a lot of other things. Maven can generate source code (maybe by using an annotation processor), generate docs. Maven can also run unit tests. Create a test report (how many passed, failed etc). Maven can also publish the output JAR file into maven repository or some private repository in your organization.</p>\n\n<p><strong>How can we do all these extra things?</strong></p>\n\n<p>Maven works on plugin model. Everything is done by some sort of plugin. In order to perform these extra tasks you just need to add plugins to your pom.xml. Configure those plugins.</p>\n\n<p>Even when you have not written anything in pom.xml regarding plugins. Maven generate an effective POM using your pom.xml and a parent POM, and adds plugins in that which perform basic tasks like compile, copy-resource, test etc.</p>\n\n<p>Each IDE provides some way to see Effective Pom of your pom.xml. Or you can run maven command &#39;<code>mvn help:effective-pom</code>&#39; to see it.</p>\n\n<p>Maven refers to tasks as &quot;<strong><em>goal</em></strong>s&quot;, Maven groups &quot;goals&quot; into &quot;<strong><em>phases</em></strong>&quot;. Maven also groups <em>phases</em> into &quot;<strong><em>lifecycles</em></strong>&quot;. When you run maven you specify either lifecycle, or phase, or goal.</p>\n\n<p>The <em>default</em> lifecycle has following phases:</p>\n\n<ul>\n\t<li><b>validate</b>: validate the project is correct and all necessary information is available</li>\n\t<li><b>compile</b>: compile the source code of the project</li>\n\t<li><b>test</b>: test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed</li>\n\t<li><b>package</b>: take the compiled code and package it in its distributable format, such as a JAR.</li>\n\t<li><b>integration-test</b>: process and deploy the package if necessary into an environment where integration tests can be run</li>\n\t<li><b>verify</b>: run any checks to verify the package is valid and meets quality criteria</li>\n\t<li><b>install</b>: install the package into the local repository, for use as a dependency in other projects locally</li>\n\t<li><b>deploy</b>: done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.</li>\n</ul>\n\n<p>There are two other Maven lifecycles of note beyond the&nbsp;<i>default</i>&nbsp;list above. They are</p>\n\n<ul>\n\t<li><b>clean</b>: cleans up artifacts created by prior builds</li>\n</ul>\n\n<ul>\n\t<li><b>site</b>: generates site documentation for this project</li>\n</ul>\n\n<p>The goals executed in a phase depends on <em>packagingType</em> of the project, which is defined in pom.xml.&nbsp;</p>\n\n<p>For example,&nbsp;<i>package</i>&nbsp;executes&nbsp;<i>jar:jar</i>&nbsp;if the project type is a JAR, and&nbsp;<i>war:war</i>&nbsp;if the project type is - you guessed it - a WAR.</p>\n\n<p>When you run a maven phase, not just that phase but all the required pre phases are also run in sequence. To see this in action run command &#39;<code>mvn clean package --debug</code>&#39;. It will show you what phases are being run in detail.</p>\n\n<h2>Typical Workflow With Maven:<br />\n&nbsp;</h2>\n\n<pre>\n<code class=\"language-python\">#install maven, using binaries or ZIP or linux packages whatever. You may be required to set JAVA_HOME environment variable.\nmvn -v #Tells you information about maven and Java installed.\n \nmvn archetype:create #Generates a project (by asking you some questions), creates a pom.xml file in project folder.\n\n#Maven creates ~/.m2/settings.xml (User Specific settings file), and ~/.m2/repository/ (User specific repository directory)\n\n#Make modifications to pom.xml\n#Run maven life-cycle commands to do your work\n#To see what maven is doing and how or where from is it getting values, use -X while running any command, it logs in verbose mode.\n\n</code></pre>\n\n<p>&nbsp; &nbsp; &nbsp;</p>\n\n<h2>Details of Maven&#39;s Working</h2>\n\n<p>Plugin is a set of goals. Every pom.xml creates a POM object which inherits from parent POM that Maven defines, and which may vary from version to version. Just like in Java you have an Object class which is parent to all objects, Maven has a POM which is parent to all POMs.</p>\n\n<p>Goal =~ task, These tasks(=goals) might require some information which need to be configured, and these tasks might also be customized.</p>\n\n<p>Lifecycle: Maven&#39;s lifecycle is defined by phases, A phase is a set of goals.</p>\n\n<pre>\n<code class=\"language-python\">mvn install #install is a phase, it will run multiple goals\n#You can attach any goal(=task) to phase, and it will run when the phase is run.\n</code></pre>\n\n<p>When you run a phase, Maven will run all the phases that come before this phase in its lifecycle automatically.&nbsp;</p>\n\n<pre>\n<code class=\"language-python\">mvn package #package is a phase, it will automatically run these phases (as these come before \"package\" in Maven's predefined life-cycle):process-resources, compile, process-test-resources, test-compile, test, prepare-package. The number of phases might vary from version to version\n\n\n</code></pre>\n\n<h2><br />\nPlugin Configuration</h2>\n\n<p>We have two tags in pom.xml to manage plugins.&nbsp;</p>\n\n<p><strong>pluginManagement</strong>: is an element that is seen along side plugins. Plugin Management contains plugin elements in much the same way, except that rather than configuring plugin information for this particular project build, it is intended to configure project builds that inherit from this one. However, this only configures plugins that are actually referenced within the plugins element in the children. The children have every right to override pluginManagement definitions.</p>\n\n<p>It will make sense when you have a parent POM file and different modules inherit this POM.</p>\n\n<p><strong>plugins</strong>: is an element in which you declare plugins and their customization settings.</p>\n\n<p>Following is taken from effective POM file for a very basic project.&nbsp;</p>\n\n<pre>\n<code class=\"language-xml\">&lt;plugins&gt;\n      &lt;plugin&gt;\n        &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;\n        &lt;version&gt;2.6&lt;/version&gt;\n        &lt;executions&gt;\n          &lt;execution&gt; &lt;!-- Link goals to phase --&gt;\n            &lt;id&gt;default-testResources&lt;/id&gt;\n            &lt;phase&gt;process-test-resources&lt;/phase&gt;\n            &lt;goals&gt;\n              &lt;goal&gt;testResources&lt;/goal&gt;\n            &lt;/goals&gt;\n          &lt;/execution&gt;\n          &lt;execution&gt; &lt;!-- Link goals to phase --&gt;\n            &lt;id&gt;default-resources&lt;/id&gt;\n            &lt;phase&gt;process-resources&lt;/phase&gt;\n            &lt;goals&gt;\n              &lt;goal&gt;resources&lt;/goal&gt;\n            &lt;/goals&gt;\n          &lt;/execution&gt;\n        &lt;/executions&gt;\n      &lt;/plugin&gt;\n      &lt;plugin&gt;\n        &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;\n        &lt;version&gt;2.4&lt;/version&gt;\n        &lt;executions&gt;\n          &lt;execution&gt; &lt;!-- Link goals to phase --&gt;\n            &lt;id&gt;default-jar&lt;/id&gt;\n            &lt;phase&gt;package&lt;/phase&gt;\n            &lt;goals&gt;\n              &lt;goal&gt;jar&lt;/goal&gt;\n            &lt;/goals&gt;\n          &lt;/execution&gt;\n        &lt;/executions&gt;\n      &lt;/plugin&gt;\n      &lt;plugin&gt;\n        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n        &lt;version&gt;3.1&lt;/version&gt;\n        &lt;executions&gt;\n          &lt;execution&gt; &lt;!-- Link goals to phase --&gt;\n            &lt;id&gt;default-compile&lt;/id&gt;\n            &lt;phase&gt;compile&lt;/phase&gt;\n            &lt;goals&gt;\n              &lt;goal&gt;compile&lt;/goal&gt;\n            &lt;/goals&gt;\n          &lt;/execution&gt;\n          &lt;execution&gt;\n            &lt;id&gt;default-testCompile&lt;/id&gt;\n            &lt;phase&gt;test-compile&lt;/phase&gt;\n            &lt;goals&gt;\n              &lt;goal&gt;testCompile&lt;/goal&gt;\n            &lt;/goals&gt;\n          &lt;/execution&gt;\n        &lt;/executions&gt;\n      &lt;/plugin&gt;\n      &lt;plugin&gt;\n        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;\n        &lt;version&gt;2.12.4&lt;/version&gt;\n        &lt;executions&gt;\n          &lt;execution&gt; &lt;!-- Link goals to phase --&gt;\n            &lt;id&gt;default-test&lt;/id&gt;\n            &lt;phase&gt;test&lt;/phase&gt;\n            &lt;goals&gt;\n              &lt;goal&gt;test&lt;/goal&gt;\n            &lt;/goals&gt;\n          &lt;/execution&gt;\n        &lt;/executions&gt;\n      &lt;/plugin&gt;\n     \n&lt;/plugins&gt;</code></pre>\n\n<p>For more detail visit:&nbsp;<a href=\"https://maven.apache.org/pom.html#Plugins\" target=\"_blank\">https://maven.apache.org/pom.html#Plugins</a></p>\n\n<h2>&nbsp;</h2>\n","authorId":null,"subject":"devops","tags":["build-systems"," build","basic"],"img":"/images/Hammer.jpg","summary":"See how Maven makes project management easy from a developer's perspective. How it can be used to build, release, deploy applications?","lastUpdated":"2018-10-19T19:06:42.560+0000"}