{"name":"Divide And Conquer","id":40,"content":"<p>Divide and Conquer:</p><p>Use of Sorting: Sorting, Binary Search , Removing duplicates, Interval Scheduling/Partitioning, Closest Pair, Minimum Spanning Tree, Convex Hull, Scheduling to minimize/maximize lateness or&nbsp;average completion time.</p><p>&nbsp;MergeSort:</p><p>&nbsp; &nbsp; &nbsp; &nbsp;</p><pre data-pbcklang=\"java\" data-pbcktabsize=\"4\" class=\"java \">mergeSort(A){\n    if(A.size() == 1) return A\n    A.splitInto(2).map { eachHalf-&gt; mergeSort(eachHalf) }.merge()\n}\n\n\n</pre><pre>def merge(List A, List B){\n    println(\"merging $A and $B\")\n    def C = []\n    int i = 0, j =0, k = 0\n    for(; i &lt; A.size() &amp;&amp; j &lt; B.size(); ){\n        if (A[i] &lt;= B[j]) { C[k++] = A[i++]}\n        else { C[k++] = B[j++] }\n    }\n    if(i &lt; A.size()) { C += A[(i..-1)]}\n    if(j &lt; B.size()) { C += B[(j..-1)]}\n    return C\n}</pre><p>&nbsp;</p><p>&nbsp;</p>","authorId":null,"subject":"algorithms","tags":[""],"img":null,"summary":null,"lastUpdated":null}