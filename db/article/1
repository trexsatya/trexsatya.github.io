{"name":"Lets Meet Java!!","id":1,"content":"<h2><span style=\"font-family:Lucida Sans Unicode,Lucida Grande,sans-serif;\">What is Java?</span></h2>\n\n<p><strong>Java</strong> is one of the most popular languages used for programming computers, and embedded devices, and mobile phones.</p>\n\n<h2><span style=\"font-family:Lucida Sans Unicode,Lucida Grande,sans-serif;\">Why is Java so popular?</span></h2>\n\n<ul>\n\t<li>Java is popular because of its simplicity and naturalness.</li>\n\t<li>Java is used in critical applications because it is secure.</li>\n\t<li>While programming in Java you are likely to make fewer mistakes.&nbsp;</li>\n\t<li>Anything built using Java&nbsp;is platform-independent i.e it will run on any machine.</li>\n</ul>\n\n<h3>&nbsp;</h3>\n\n<h2><span style=\"font-family:Lucida Sans Unicode,Lucida Grande,sans-serif;\">How should you understand </span><span style=\"font-family:Lucida Sans Unicode,Lucida Grande,sans-serif;\">Java?</span></h2>\n\n<p>Java is just a language, and like any other language it has some grammar rules which you have to follow; otherwise, the computer won&#39;t understand what to do.</p>\n\n<p>Also, you have to understand Java is Object Oriented language. So it revolves around objects - defining objects, creating objects, using objects, destroying objects (well you don&#39;t have to destroy them by yourself Java does this for you).&nbsp;<br />\nYou should also understand Java is Statically-Typed language, so every object is defined to be of some TYPE. A TYPE&nbsp;is&nbsp;defined by creating <strong>a class</strong>&nbsp;in Java.<br />\nYou should also understand in Object Oriented world, one object can ask another object to do something. This is done by message passing. Tell another object to do something using the message that you send and get something in return.<br />\n&nbsp;</p>\n\n<h2><span style=\"font-family:Lucida Sans Unicode,Lucida Grande,sans-serif;\">How does a machine/computer understand </span><span style=\"font-family:Lucida Sans Unicode,Lucida Grande,sans-serif;\">Java?</span></h2>\n\n<p>....</p>\n\n<h2><span style=\"font-family:Lucida Sans Unicode,Lucida Grande,sans-serif;\">What would you need to work with </span><span style=\"font-family:Lucida Sans Unicode,Lucida Grande,sans-serif;\">Java?</span></h2>\n\n<ol>\n\t<li>Java Software: JDK (Java Development Kit) it has a lot of things within it, but initially you have to know only two: Java compiler (javac) and Java interpreter (java)</li>\n\t<li>Simple Text editor (example Notepad, Vi, Vim, Notepad++, EditPlus)</li>\n</ol>\n\n<p>But using the above, you can write just simple programs. To make your life easier while creating applications (containing many programs), you will require something called<br />\nIntegrated Development Environment (IDE) e.g. Eclipse, IntelliJ<br />\nThis IDE software is available in different versions for different operating systems and they have everything available for developing Java applications.&nbsp;</p>\n\n<h2><span style=\"font-family:Lucida Sans Unicode,Lucida Grande,sans-serif;\">How would you write&nbsp;your first Java program?</span></h2>\n\n<p><font face=\"Comic Sans MS, cursive\">First, decide what should your program do.</font></p>\n\n<ul>\n\t<li>&nbsp;it can be made to say &quot;Hello&quot; to you, but only using text. You will not hear it, just see it.</li>\n\t<li>&nbsp;it can be made to add/subtract/multiply/divide two or more numbers.</li>\n\t<li>&nbsp;It can count from numbers or print tables.</li>\n\t<li>&nbsp;it can be made to say &quot;Hello&quot; to you, and you will be able to hear it. [It will be a little bit too much for the First program, but yeah..possible]</li>\n</ul>\n\n<p>Whatever you decide to do, you have to do the following.</p>\n\n<p>1. Create a JAVA&nbsp;file using a Text editor or IDE.</p>\n\n<p>2. Compile that Java file using <code>javac</code><code> </code>command-line or using IDE button. It will give you a CLASS file.</p>\n\n<p>3. Run the CLASS file using <code>java</code><code> </code>command-line or some IDE button. It will give you your desired output.</p>\n\n<p><br />\nIn the JAVA file, write the following:</p>\n\n<pre>\n<code class=\"language-java\">public class MyFirstJavaPogram {\n\n   public static void main(String[] programInputs){\n     \n   }\n}</code></pre>\n\n<p>The above is a skeleton of any basic Java program and it has many things which are building blocks of Java language:<br />\nClass, Method, Main method, Arguments, Array, Access Specifier</p>\n\n<ul>\n\t<li><strong>public in the first line&nbsp;</strong>is an Access Specifier -&gt; It tells that any other class can use this class.</li>\n\t<li><strong>class </strong>tells that MyFirstJavaPrgram is a class / Type. After this, you can create objects of this Type.</li>\n\t<li><b>( .. ) </b>tells that<b> main is a method</b></li>\n\t<li><b>void before main(..)&nbsp;</b>tells that when you ask the main method to do its work, it just does whatever is told inside { .. }; but it will not return you anything.</li>\n\t<li>main<strong>(String[] </strong>programInputs<strong>) </strong>tells that the main method can accept an <strong>ARRAY of String types&nbsp;</strong>i.e. Zero or more objects of String type. <strong>programInputs</strong>&nbsp;is just a name given to this array. It can be anything.</li>\n\t<li><strong>static&nbsp;</strong>before void main(..) tells that we don&#39;t have to create an object of type MyFirstJavaProgram (the containing class) to use this main method. We can directly use it like this: MyFirstJavaProgram.main(..)</li>\n\t<li><strong>public&nbsp;</strong>is again an access specifier, which tells that this method is public to all; i.e. any other class can use this method.</li>\n</ul>\n\n<p>But the main thing is that you do not have to use this main(..) method; Java automatically calls this method when you Run the program. This method is called the Main Method.</p>\n\n<p>But remember that you have to use exact format for the main method, You have to use public access specifier, you have to use void return type, and you have to use String array as an argument.</p>\n\n<p>Now whatever you want your program to do; write that inside of the main method.</p>\n\n<p>e.g. To print your name&nbsp; &nbsp;</p>\n\n<pre>\n<code class=\"language-java\"> .... main(String[] names){\n    System.out.println(\"Hello \"+names[0]);\n}</code></pre>\n\n<p>Now run the program by passing your name as program argument e.g. if you are using command line interpreter</p>\n\n<pre>\n<code class=\"language-bash\">java MyFirstJavaProgram Satyendra</code></pre>\n\n<h2><span style=\"font-family:Lucida Sans Unicode,Lucida Grande,sans-serif;\">Things that could go wrong here</span></h2>\n\n<p><span style=\"font-family:Lucida Sans Unicode,Lucida Grande,sans-serif;\"><span style=\"color:#cc0000;\"><strong>Syntactic Errors: Your program does not compile</strong></span></span><br />\n<br />\n<span style=\"font-family:Arial,Helvetica,sans-serif;\">You could run into compiler error. These errors show up when you run&nbsp;<em>javac</em>&nbsp;command. In IDEs your code gets automatically compiled time to time, so the compiler errors automatically show up on screen.<br />\nCompiler errors occur if you have not adhered to Grammar of the Java language.<br />\ne.g. misspelling in reserved keywords such as public, class, static, void etc.<br />\n&nbsp;You have forgotten to put a semi-colon at the end of the line in the code.<br />\n&nbsp;Braces do not match&nbsp;</span><br />\n<br />\n<span style=\"font-family:Lucida Sans Unicode,Lucida Grande,sans-serif;\"><strong><span style=\"color:#cc0000;\">Your program compiles but does not run correctly:</span></strong></span><br />\n<br />\n<span style=\"color:#cc0000;\">java.lang.NoSuchMethodException</span> --&gt; You see a message like this<br />\n&nbsp; &nbsp; &nbsp; &nbsp; <code>&nbsp;Exception in thread &quot;main&quot; java.lang.NoSuchMethodException: MyFirstJavaProgram.main([Ljava.lang.String;)</code><br />\nThis message tells you that you have not written the main method in its correct format.</p>\n\n<p>&nbsp;</p>\n\n<h2>What is Past, Present and Future of Java?</h2>\n\n<p>&nbsp; &nbsp;Java was developed at Sun Microsystems under the guidance of&nbsp; James Gosling and Bill Joy. Primarily developed for Applets.&nbsp;<br />\n&nbsp; &nbsp;<br />\n&nbsp; &nbsp;Java versions:<br />\n<br />\n&nbsp; &nbsp;Java 1.0 -- codename Oak =&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JDBC, Inner Classes, RMI, Reflection<br />\n<br />\n&nbsp; &nbsp;Java 1.2 &nbsp;-- codename Playground =&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Collections Framework, String memory map for constants, JIT Compiler, Jar Signer for JAR files, Policy Tools for granting access to system resources, JFC including Swing 1.0, Java 2D<br />\n<br />\n&nbsp; &nbsp;Java 1.3 -- codename Kestrel =&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Java Sound, Jar indexing, improvements<br />\n<br />\n&nbsp; &nbsp;Java 1.4 -- codename Merlin &nbsp;=&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;XML Processing, Java Print service, Logging API, Java Web Start, JDBC 3.0, Assertions, Preferences API, Chained exception, IPv6, Regular Expressions, Image I/O API.<br />\n<br />\n&nbsp; &nbsp;Java 1.5 -- codename Tiger =&gt; J2SE-5.0<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Generics, Enhanced For loops, Boxing, Typesafe enums, Varargs, Static imports, Annotations (metadata), Instrumentation<br />\n<br />\n&nbsp; Java 1.6 -- codename Mustang =&gt; Java SE 6<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Scripting language support, JDBC 4.0, Compiler API, Pluggable annotations, &nbsp;Native PKI, Java GSS, Kerberos and LDAP support,&nbsp;Integrated Web Services<br />\n<br />\n&nbsp; Java 1.7 -- codename Dolphin &nbsp;=&gt; Java SE 7&nbsp;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Strings in switch Statement, Type Inference for Generic Instance Creation, Multiple Exception Handling, &nbsp;Support for Dynamic Languages, &nbsp;Try with Resources, &nbsp;Java nio Package, &nbsp;Binary Literals, underscore in literals, &nbsp;Diamond Syntax, &nbsp;Automatic null Handling<br />\n<br />\n&nbsp; Java 1.8 &nbsp;=&gt; Java SE 8<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Lambda Expressions, &nbsp;Pipelines and Streams, &nbsp;Date and Time API, &nbsp;Default Methods, &nbsp;Type Annotations, &nbsp;Nashhorn JavaScript Engine, &nbsp;Concurrent Accumulators, &nbsp;Parallel operations, &nbsp;PermGen Error Removed, &nbsp;TLS SNI<br />\n<br />\nAt present (1st Mar&nbsp;2017) Sun is owned by Oracle. But &nbsp;Java (JDK and JVM) is still free to use as this was released under GPL license.<br />\n<br />\nJava is available in 4 editions. Java SE, Java ME, &nbsp; Java EE, Java Card. These editions target different platforms and environments.<br />\n<br />\n&nbsp;</p>\n","authorId":null,"subject":"linked-to-132","tags":["basic","intro"],"img":null,"summary":null,"lastUpdated":"2020-08-29T07:58:50.379+0000"} 
