{"name":"Hibernate","id":144,"content":"<p>Hibernate is a framework that can be used to access Database in smart and efficient way.</p>\n\n<p><img alt=\"Data Access Layers\" src=\"http://docs.jboss.org/hibernate/orm/5.2/userguide/html_single/images/architecture/data_access_layers.svg\" style=\"width: 211px; height: 288px; float: left;\" />&nbsp;&nbsp;</p>\n\n<p>&nbsp; While using DB in your application, you can either use JDBC to access DB which sure would be fastest way to do that.</p>\n\n<p>&nbsp; But using JDBC in raw form is cumbersome, a lot of boilerplate code (coding noise) is there.</p>\n\n<p>&nbsp; Hibernate gives you a way in which you can treat your tables data as set of objects. Each row in table is represented as a class. This special class is called Entity class.</p>\n\n<p><img alt=\"image\" src=\"http://docs.jboss.org/hibernate/orm/5.2/userguide/html_single/images/architecture/JPA_Hibernate.svg\" style=\"float: right;\" /></p>\n\n<p>&nbsp; Hibernate and JPA (Java Persistence API).&nbsp;</p>\n\n<p>&nbsp; JPA is a standard. There are many implementations for JPA, Hibernate is one of them.</p>\n\n<p>&nbsp; The relationship between APIs of JPA and Hibernate is&nbsp;</p>\n\n<p>&nbsp; shown here:</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p><strong>SessionFactory (<code>org.hibernate.SessionFactory</code>) &nbsp;</strong></p>\n\n<p>&nbsp; &nbsp; equivalent to JPA&nbsp;<code>EntityManagerFactory</code>&nbsp;</p>\n\n<p>Immutable and Thread-Safe</p>\n\n<p>maintains services that Hibernate uses across all&nbsp;<code>Session(s)</code>such as second level caches, connection pools, transaction system integrations, etc.</p>\n\n<p><strong>Session =~ EntityManager</strong></p>\n\n<p>Single-threaded, short-lived object</p>\n\n<p>wraps JDBC Connection and is used to create&nbsp;Transaction objects</p>\n\n<p><strong>Transaction =~&nbsp;<code>EntityTransaction</code>&nbsp;</strong></p>\n\n<p>A single-threaded, short-lived object used by the application to demarcate individual physical transaction boundaries.They just abstract away underlying&nbsp;transaction system in use (JDBC or JTA)</p>\n\n<h2><span style=\"color:#8e44ad;\">ORM - Object Relational Mapping</span></h2>\n\n<p>Hibernate allows you to map your tables to Java objects. You can tell which table maps to which class, and which column of table maps to which field of the class.&nbsp;</p>\n\n<p>You can also map relations(foreign keys) among tables into classes. It simplifies things. Hibernate does the conversion of data types between table data and java object data.</p>\n\n<p>You need to tell hibernate about this mapping. You can tell that using XML file, or using annotations.</p>\n\n<pre>\n<code class=\"language-java\">\n@Entity\nclass EntityName{\n    //A no argument constructor is must\n   \n    @Id private int id;\n\n}\n//@Entity, @Id are logical annotations\n//There are physical annotations also, which can be used to customize the default behavior while mapping class to tables\n\n@Entity\n@Table(name = \"TB_PERSON_02837\")\npublic class Person {\n\t@Id\n\t@GeneratedValue(strategy = GenerationType.AUTO)\n\tprivate int id;\n\t\n\t@Basic(fetch = FetchType.LAZY)\n\t@Column(name = \"PERSON_NAME\", length = 100, unique = true, nullable = false)\n\tprivate String name;\n\t\n\t@OneToMany\n\tprivate List&lt;Car&gt; cars;\n\t\tpublic String getName() {\n\t\treturn name;\n\t}\n}\n</code></pre>\n\n<p>JPA can generate id value automatically (using DB). But there are many strategies to do this and you have to tell which one to use.</p>\n\n<p>There are 3 strategies: (1) Identity [Here DB is consulted for Id value on each insert] (2) Sequence [ Here instead of consulting DB on each insert,a chunk of numbers is fetched from DB (and is cached), DB stores values using a SEQUENCE] (3) Table generator (Here also instead of consulting DB on each insert,a chunk of numbers is fetched from DB (and is cached), DB stores values using a table&nbsp;).&nbsp;</p>\n\n<p>By default&nbsp;@GeneratedValue will choose any one of the three, whichever is available and use it.</p>\n\n<p><strong>Composite Keys</strong></p>\n\n<p>Hibernate and JPA allow you to use composite keys in Java classes</p>\n\n<p>Simple Composite Keys: Where key is comprised of many attributes; you can extract those into a separate class</p>\n\n<pre>\n<code class=\"language-java\">@Embeddable\npublic class CarId implements Serializable{\n  private int serial;\n  private String brand;\n  \n  //No Argument constructor must\n\n  //Getter, Setter\n  //HashCode and Equals implementaiton must\n\n}\n\npublic class Car{\n  @EmbeddedId\n  private CarId carId;\n}</code></pre>\n\n<p>Complext Composite Keys: Where the primary key maps to another entity&nbsp;(i.e some foreign key value is used as primary key value in table)</p>\n\n<pre>\n<code class=\"language-java\">@Entity\npublic class DogHouse {\n  @Id\n  @OneToOne\n  @JoinColumn(name = \"DOG_ID\")\n  private Dog dog;\n\n}\n\n@Entity\npublic class Dog {\n  @Id\n  private int id;\n}\n\n//In case the PK is made of two foreign keys\n@Entity\n@IdClass(DogHouseId.class)\npublic class DogHouse {\n\t@Id\n\t@OneToOne\n\t@JoinColumn(name = \"DOG_ID\")\n\tprivate Dog dog;\n\t\n\t@Id\n\t@OneToOne\n\t@JoinColumn(name = \"PERSON_ID\")\n\tprivate Person person;\n\n}\n\npublic class DogHouseId implements Serializable{\n\tprivate int person;\n\tprivate int dog;\n}</code></pre>\n\n<p>Sometimes the data is hierarchical (when are trying to map tables to Java classes), in that case some attributes can be moved to superclass.</p>\n\n<p>There are few options to arrange hierarchical data. @MapperSuperClass,&nbsp;@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS | JOINED | SINGLE_TABLE)</p>\n\n<p>To compare which option is better, find out what will be insertion/deletion/updation and query cost, and which of these operations are prevalent in your application. Tradeoff is between (as always ) storage required vs time to execute operations.</p>\n\n<h2><span style=\"color:#8e44ad;\">Typical Hibernate Workflow</span></h2>\n\n<pre>\n<code class=\"language-java\">//Set configurations\n//Create SessionFactory\n//Create Session\n//Use that session to perform operations on Entity classes\n\nConfiguration configuration = new Configuration();\nconfiguration.configure(\"hibernate.cfg.xml\");\n\nServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder().applySettings(configuration.  getProperties()).build();\nsessionFactory = configuration.buildSessionFactory(serviceRegistry)\n\nsession = sessionFactory.openSession();\npersistPerson(session);\n\n//Close session and sessionFactory</code></pre>\n\n<p>Typical configuration file</p>\n\n<pre>\n<code class=\"language-xml\">&lt;!DOCTYPE hibernate-configuration PUBLIC\n\"-//Hibernate/Hibernate Configuration DTD 3.0//EN\"\n\"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\"&gt;\n&lt;hibernate-configuration&gt;\n\t&lt;session-factory&gt;\n\t\t&lt;property name=\"connection.driver_class\"&gt;org.h2.Driver&lt;/property&gt;\n\t\t&lt;property name=\"connection.url\"&gt;jdbc:h2:~/hibernate;AUTOCOMMIT=OFF&lt;/property&gt;\n\t\t&lt;property name=\"connection.username\"&gt;&lt;/property&gt;\n\t\t&lt;property name=\"connection.password\"&gt;&lt;/property&gt;\n\t\t&lt;property name=\"connection.pool_size\"&gt;1&lt;/property&gt;\n\t\t&lt;property name=\"dialect\"&gt;org.hibernate.dialect.H2Dialect&lt;/property&gt;\n\t\t&lt;property name=\"current_session_context_class\"&gt;thread&lt;/property&gt;\n\t\t&lt;property name=\"cache.provider_class\"&gt;org.hibernate.cache.internal.NoCacheProvider&lt;  -\n/property&gt;\n\t\t\t&lt;property name=\"show_sql\"&gt;true&lt;/property&gt;\n\t\t\t&lt;property name=\"format_sql\"&gt;true&lt;/property&gt;\n\t\t\t&lt;property name=\"hbm2ddl.auto\"&gt;create&lt;/property&gt;\n\t\t\t&lt;mapping resource=\"Project.hbm.xml\"/&gt;\n\t\t&lt;/session-factory&gt;\n&lt;/hibernate-configuration&gt;</code></pre>\n\n<p>&nbsp;</p>\n","authorId":null,"subject":"programming","tags":["prity=6"],"img":"/images/hibernation.jpg","summary":"To connect and work with Databases, Java provides you withh JDBC. But working with JDBC is not easy. Its boring and difficult to maintain. That's why there are many Object Relational Mapping frameworks/tools which make working with DBs easier. Hibernate is one of the most popoular ORM tools.","lastUpdated":"2020-04-20T12:08:41.129+0000"}