{"name":"Ruby and Python for Hacking","id":202,"content":"<div class=\"duals\">\n<pre>\n<code class=\"language-ruby\">my_num = 12.0    \nmy_boolean = true   \nmy_string =  \"ada\"  # OR 'ada'\n\nputs my_num \n\nputs \"Hello\"  #appends new line at the end\nprint \"again\" #it doesn't append new line at the end\n\n\nputs \"Your name is #{first_name} #{last_name} !\"</code></pre>\n\n<pre>\n<code class=\"language-python\">my_num = 12.0\nmy_boolean = True\nmy_string = \"ada\" #or 'ada'\n\nprint(my_num) #parenthesis not required in before Python 3\n\n#print appends new line at the end; use end='' parameter to disable this\nprint(my_num,my_boolean,my_string) #separated by space automatically; \nprint(my_num,my_boolean,my_string, sep=\" ---\") #separated by ---\n\nprint(\"Your name is %s %s!\" % (first_name, last_name))</code></pre>\n</div>\n\n<p>&nbsp;</p>\n\n<p>Classes, Methods</p>\n\n<div class=\"duals\">\n<pre>\n<code class=\"language-ruby\">class Greeter\n  @@count = 0 #class variable\n  def initialize(name = \"World\", salutation= \"Hello\")\n    @name, @salutation = name, salutation\n  end\n  def say_hi\n    puts \"#{@salutation} #{@name}!\"\n  end\n  def say_bye\n    puts \"Bye #{@name}, come back soon.\"\n  end\n  def getName\n    @name\n  end\n  def setName=(val)\n    @name = val\n  end\n\n  def self.totalGreetings #Class method\n    @@count\n  end\n  \n  private :getName, :say_hi #You can make methods private, protected\nend\n\n#Make usage of class\ngreeter = Greeter.new(\"Pat\")\ngreeter.say_hi\ngreeter.name = \"New name\" #Use setter\n\n</code></pre>\n\n<pre>\n<code class=\"language-python\">class Greeter:\n    count = 0 #class variable\n\tdef __init__(self,name = \"World\", salutation = \"Hello\"):\n\t\tself.name, self.salutation = name, salutation\n\t\n    def say_hi(self):\n\t\tprint(\"%s %s !\" % (self.salutation, self.name))\n\n    def say_bye(self):\n        print(\"Bye %s, come back soon.\" % self.name)\n\n    #You can directly access name and salutation using dot operator on object\n    #You can also use getattr(obj, 'name') to get\n\n    #You can directly set values on object\n    #You can use setattr(obj, 'name', \"Afda\") to set\n\n    @classmethod\n    def totalGreetings(cls):\n        return cls.count\n\n\n    #In python you can't make methods private/protected\n\n\n#Make use of class, create object\ngreeter = Greeter(\"sa\")\ngreeter.say_hi()\n\n\n</code></pre>\n</div>\n\n<p>&nbsp;</p>\n\n<p>Methods, Varargs, Introspection of classes</p>\n\n<p>&nbsp;</p>\n","authorId":null,"subject":"security","tags":null,"img":null,"summary":null,"lastUpdated":"2018-09-16T19:11:15.220+0000"}