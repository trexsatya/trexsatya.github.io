{"name":"Distributed Transactions","id":118,"content":"<h2>Objective</h2>\n\n<p>To understand what distributed transaction means, and what are some standard implementations.</p>\n\n<p>More importantly I want to show an awesome tool <a href=\"http://lamport.azurewebsites.net/tla/learning.html\" target=\"_blank\">TLA+</a> in action. The writer of the tool himself implemented Paxos Commit which overcomes some of the limitations of Two-Phase Commit algorithm.</p>\n\n<p>Remeber, writing fault-tolerant distributed systems is not an easy task and even testing doesn&#39;t help much here. That&#39;s where this tool becomes utterly useful.</p>\n\n<h2>Two Phase Commit Algorithm</h2>\n\n<p>Two-Phase Commit (2PC) algorithm is a lot like western style marriage ceremonies. There are interested parties (not just bride and groom), there is a transaction manager (just like the priest), priest asks parties &quot;Are you willing to commit&quot; and they respond &quot;yes&quot; or &quot;no&quot;. If all of them respond &quot;yes&quot;, then the transaction is complete. Otherwise aborted.</p>\n\n<p>The whole system that facilitates this algorithm can be seen as a state machine.</p>\n\n<p>&nbsp;</p>\n\n<p>Imagine this scenario in 2PC. Transaction Manager fails or hangs after getting &quot;yes&quot; from every party. Parties do not get to know whether transaction committed or aborted, and hence the system is blocked.</p>\n\n<p>How would you solve that? The classic solution is to have a backup transaction manager which takes over once it detects that primary TM has failed (i.e. not responding). <em>Three Phase Commit</em>.</p>\n\n<p>But... TM can be befooled in thinking that primary TM has failed. How??? Suppose primary TM has received &quot;yes&quot; from all parties, but then hangs up because CPU preempted it to schedule some other task. Backup TM finds that primary TM is not responding, hence it takes over and sends &quot;Abort&quot; message to all parties, in the meantime primary TM comes up again and sends &quot;Commit&quot; message to every party.</p>\n\n<p>The system is now in an inconsistent state.</p>\n\n<h2>Paxos Commit</h2>\n\n<p>Paxos algorithm is a popular asynchronous consensusalgorithm.</p>\n\n<p>&nbsp;</p>\n","authorId":null,"subject":"architectures","tags":null,"img":null,"summary":null,"lastUpdated":null}