{"name":"Object Oriented Java","id":94,"content":"<h2>Encapsulation</h2>\n\n<hr />\n<div class=\"dDoNo gsrt t0PA4d X98sZd\" style=\"margin-bottom:0;line-height:normal\">\n<div class=\"xhf7k\">\n<div style=\"font-size: smaller;\"><br />\n<span data-dobid=\"hdw\">encapsulate</span></div>\n</div>\n</div>\n\n<div style=\"font-size: smaller;\">\n<div class=\"lr_dct_ent_ph\"><span class=\"lr_dct_ph XpoqFe\">/<span>ɪnˈkapsjʊleɪt</span>,<span>ɛnˈkapsjʊleɪt</span>/</span></div>\n\n<div class=\"lr_dct_ent_ph\"><span class=\"lr_dct_ph XpoqFe\">Meaning: </span></div>\n\n<ol>\n\t<li class=\"lr_dct_ent_ph\"><span>express the essential features of (something) succinctly.</span></li>\n\t<li class=\"lr_dct_ent_ph\"><span>enclose (something) in or as if in a capsule.</span></li>\n</ol>\n</div>\n\n<p class=\"lr_dct_ent_ph\"><span>In Java language a Class (which can be seen as a capsule) encloses two things in it: operations, and data/state.</span></p>\n\n<p><a href=\"https://stackoverflow.com/questions/11966763/java-encapsulation/11970468#11970468\" target=\"_blank\">Read This Stackoverflow Link</a></p>\n\n<p>Summary of the link: It is about hiding the details (<em>about how the object looks and about how the object performs some actions</em>) from the outside world, you control how much detail should be exposed and to whom. The elements which make this possible in Java language are <strong><em>Access Specifiers</em></strong> e.g. private, protected, package-level. One interesting question is why? - Because we don&#39;t want you to depend on my current implementation, maybe I will change my current implementation with a more efficient algorithm in future, and it should not affect you when I do that, so better not depend on my implementation details.</p>\n\n<h2><br />\n<span style=\"font-family:Comic Sans MS,cursive;\">Abstraction</span></h2>\n\n<hr />\n<div class=\"dDoNo gsrt t0PA4d X98sZd\" style=\"margin-bottom:0;line-height:normal\">\n<div class=\"xhf7k\">\n<div style=\"font-size:smaller\"><br />\n<span data-dobid=\"hdw\">abstraction</span></div>\n</div>\n</div>\n\n<div style=\"font-size:smaller\">\n<div class=\"lr_dct_ent_ph\"><span class=\"lr_dct_ph XpoqFe\">/<span>əbˈstrakʃ(ə)n</span>/</span></div>\n\n<div class=\"lr_dct_ent_ph\"><span class=\"lr_dct_ph XpoqFe\">Meaning:</span></div>\n\n<ol>\n\t<li class=\"lr_dct_ent_ph\"><span>the quality of dealing with ideas rather than events.</span></li>\n\t<li class=\"lr_dct_ent_ph\"><span>freedom from representational qualities in art.</span></li>\n\t<li class=\"lr_dct_ent_ph\"><span>the process of considering something independently of its associations or attributes.</span></li>\n</ol>\n\n<p class=\"lr_dct_ent_ph\">&nbsp;</p>\n</div>\n\n<p>Abstraction means <em><strong>cutting away unncessary details</strong> (what details are we talking about? - About how the object looks, and what it can do)</em>, generalize things <em>(but how much details should I cut away, at some point we do require details?)</em>, finding commonailities.</p>\n\n<p>Abstraction represents something bigger and complicated in a simple and relevant form. Remember at some point you have to deal with the complex details, but you should refine your way, starting with easiest representation without any details. So the idea is to keep one purely abstract view of the object <em>(which means interfaces in Java language)</em>, maybe one low-level abstract view <em>(which means abstract class before Java 8, and either interface with some default methods/abstract class after Java 8)</em> of the object, and then the object which will have details <em>(which means some class that extends abstract class &amp; implements interfaces)</em>.</p>\n\n<p>Remember, people give simple answer to this rather philosophical term (<em>like I am giving with below example</em>). It&#39;s not easy to give 100% satisfying answer to what can be considered abstract and what can&#39;t be considered abstract. It mostly depends on the use case.</p>\n\n<p><strong>Example:&nbsp;</strong></p>\n\n<p>I want to create a software for managing a school. I want to record which student belongs to which course, which subjects he studies, and all other information about them.</p>\n\n<p>If I were to create that software in an Object Oriented Language like Java, I would have to identify the &quot;Objects&quot; which will make the system.&nbsp;</p>\n\n<p>Start with</p>\n\n<pre>\n<code class=\"language-java\">class Teacher{ age, experience, firstName, lastName, address, phoneNumber }\n\nclass Student{ age, firstName, lastName, address, phoneNumber }</code></pre>\n\n<p>As we can see there are some things which are common in both Teacher and Student, so we can put them into a class which will be used by both. Here Person is a more abstract view of both Teacher and Student.</p>\n\n<pre>\n<code class=\"language-java\">class Person { \n   firstName, lastName, age, address, phoneNumber\n}</code></pre>\n\n<p>We could also start by thinking that school will have persons, I don&#39;t care whether it&#39;s a student or a teacher. Person is a more abstract, common, generalized view of students and teachers.</p>\n\n<p>&nbsp;</p>\n\n<div style=\"background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;\">Remember, concepts of Encapsulation and Abstraction seem similar. They have very subtle difference. Generally Encapsulation is thought of dealing with <em>information hiding and packing both data and behavior in a single entity</em>, and Abstraction is thought of dealing with <em>behavior hiding</em>. However, you can&#39;t have true abstraction without Encapsulation.<br />\n<br />\nSee this <a href=\"https://stackoverflow.com/questions/742341/difference-between-abstraction-and-encapsulation\" target=\"_blank\">stackoverflow link</a> for more.</div>\n\n<h2><br />\n<font face=\"Comic Sans MS, cursive\">Inheritance</font></h2>\n\n<hr />\n<p><br />\nNow that we have found a common class Person which can represent both Student and Teacher. In other words we can say, &quot;Student is a Person&quot; and &quot;Teacher is a Person&quot;..</p>\n\n<pre>\n<code class=\"language-java\">class Student extends Person { }\n\nclass Teacher extends Person { }</code></pre>\n\n<p>This way of saying &quot;X-<em>is-a</em>-Y&quot; is called Inheritance.</p>\n\n<p>Beware it is a very strict concept, when we are saying &quot;Student is a Person&quot; it means that whatever Person class has will also be available to Student class. Here Person class can be referred as &quot;Parent&quot; class, and Student as &quot;Child&quot; class. Child will have everything (<em>both data and operations</em> that is <strong>not private</strong> in parent class) that parent has plus it can have more.</p>\n\n<p>You should be careful when designing classes like this, unncessary things should not be part of any class even though it has received them through Inheritance.&nbsp;</p>\n\n<div style=\"font-size: smaller;\">\n<h2><br />\nPolymorphism</h2>\n\n<hr /><br />\n<span data-dobid=\"hdw\">polymorphism</span></div>\n\n<div style=\"font-size: smaller;\">\n<div class=\"lr_dct_ent_ph\"><span class=\"lr_dct_ph XpoqFe\">/<span>ˌpɒlɪˈmɔːfɪz(ə)m</span>/</span></div>\n\n<div class=\"lr_dct_ent_ph\"><span class=\"lr_dct_ph XpoqFe\">Meaning:</span> <span>the condition of occurring in several different forms.</span></div>\n</div>\n\n<p><br />\nFirst of all, polymorphism makes sense only after you understand inheritance.</p>\n\n<p>In inheritance &quot;Y-<em>is-a</em>-X&quot;, the child class(Y) does the same things as X, but it might do them in a different way. Now to outside world who do not know about difference between X and Y, they look similar, and they can interact with them in a similar way (calling same method on their objects).</p>\n\n<p>Consider this scenario: I need X to do something. In Java language, we will have to write something like this:</p>\n\n<pre>\n<code class=\"language-java\">X objectX = new X(); objectX.doSomething();</code></pre>\n\n<p>But since &quot;Y-<em>is-a</em>-X&quot;, it doesn&#39;t matter to me, if I do this; because to the ourside world Y can be seen same as X, although it might behave differently.</p>\n\n<pre>\n<code class=\"language-java\">X objectX = new Y(); objectX.doSomething(); //Although the real object is a Y, still I can see it as an X</code></pre>\n\n<p>But what actually happens from calling the doSomething() method might be different from earlier. It depends on the actual implementation of class Y.&nbsp;</p>\n\n<p>This phenomenon when two objects of same(similar) type/class behave in many(poly) forms(morphs), is called polymorphism.</p>\n\n<p>In syntactical terms, child class <strong>overrides</strong> methods from parent class, to show different form of behavior.</p>\n\n<p>In other words, when you write something like this:</p>\n\n<pre>\n<code class=\"language-java\">X object = new X();\n//L.H.S = R.H.S</code></pre>\n\n<p>Left-Hand-Side (L.H.S.) is about <strong>interface/api</strong> (what can I do), and Right-Hand-Side (R.H.S.) is about <strong>implementation</strong> how to do that.</p>\n\n<p><strong>A Concrete Example:</strong></p>\n\n<pre>\n<code class=\"language-java\">class X {\n  void hello(){ return \"Hello from X!\"; }\n}\n\nclass Y extends X {\n  void hello(){ return \"Hello from Y!\"; }\n}\n\nX obj = new Y();\nSystem.out.println(obj.hello());\n\n//What would the output here?\n//Remember R.H.S. is about implementation of hello() method. Which implementation will be called?\n//You guessed it right. The one on the R.H.S. i.e. from Y class.</code></pre>\n\n<p>&nbsp;</p>\n","authorId":null,"subject":"linked-to-132","tags":["basic"],"img":null,"summary":null,"lastUpdated":"2018-07-01T13:59:24.182+0000"}