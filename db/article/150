{"name": "Gradle", "id": 150, "content": "<p>Gradle is an advanced tooling system which is highly compatible with Maven and solves the problem that you face with Maven especially when you need to customize something and you find that it is very difficult to do with Maven. Gradle allows you to easily integrate with other tools because it provides an API.</p>\n\n<h2>Why Choose Gradle instead of Maven?</h2>\n\n<p>Visit this page. It has detailed explanation of why: <a href=\"https://gradle.org/maven-vs-gradle/\" target=\"_blank\">Gradle Vs Maven</a>.</p>\n\n<p>The main benefits are easy customization, easy integration, user experience, faster build times.</p>\n\n<h2>Setting Up A Project With Gradle</h2>\n\n<ol>\n\t<li>Install Gradle manually.</li>\n\t<li>Generate wrapper script, so that everyone in your team does not have to do that.</li>\n\t<li>Configure Gradle to use your artifactory.</li>\n\t<li>Put configuration file and gradle wrapper into gitlab.</li>\n</ol>\n\n<p><strong>How to generate wrapper?</strong><br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Just run command: &#39;<code>gradle wrapper</code>&#39;<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;(If your organization does not allow to push binary files like JAR into repo, you need to find your way around somehow, Gradle does not provide any solution in this case)<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; The generated Wrapper properties file, <code>gradle/wrapper/gradle-wrapper.properties</code>, stores the information about the Gradle distribution.</p>\n\n<p><strong>How to upgrade gradle project?</strong><br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Use command &#39;<code>gradlew wrapper</code>&#39; and commit changes to repo, and reimport the project.</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; You may be required to upgrade plugins.</p>\n\n<p>&nbsp;</p>\n\n<h2>Troubleshooting</h2>\n\n<p>Troubleshooting Gradle:&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp;&nbsp; Run command to get insight <code>gradle --version</code><br />\n&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp;&nbsp; If <code>gradlew</code> is working fine (from command line), but IDE is giving problem.<br />\n&nbsp;&nbsp;&nbsp; For example, <em>Cause: org.jetbrains.plugins.gradle.tooling.util.ModuleComponentIdentifierImpl.getModuleIdentifier()Lorg/gradle/api/artifacts/ModuleIdentifier;</em><br />\n&nbsp;&nbsp; &nbsp;<em>Method not found, or plugin not found/allowed</em>.<br />\n&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp;&nbsp; Maybe your IDE version is not able to handle the updated gradle version.<br />\n&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp; &nbsp;If you have updated everything IDE, Gradle, and Plugin still facing problem?<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Delete <code>.idea</code>, delete <code>.gradle</code> in your user home and project as well as and import project afresh.<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp; &nbsp;You may also need to upgrade Java version accordingly.<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;(Remember Java, Gradle, IDE and plugins are all interdependent)<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\n------------------<br />\n<strong>Troubleshooting dependency problems:</strong><br />\n&nbsp;&nbsp; &nbsp;Dependency problems can be identified by ClassNotFound, NoClassDefintionFound errors,<br />\n&nbsp;&nbsp; &nbsp;Method not found errors etc.<br />\n&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp; &nbsp;Gradle automatically scans and picks the latest version (following some rules). You can use <code>dependencyInsight </code>task to see why a specific version was picked.<br />\n&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp; &nbsp;Gradle allows you to use dynamic versions (e.g. 2.+) and changing versions (e.g. -SNAPSHOT) it has TTL for which it doesn&#39;t download again (24 hours by default).<br />\n&nbsp;&nbsp; &nbsp;You can lock dependency once you built using dynamic versions, so that you can check it into your repo, so that everyone else can use the same verions and not face any problem.<br />\n&nbsp;&nbsp; &nbsp;<br />\n-----------------<br />\n<strong>Troubleshooting Builds:</strong><br />\n&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp; &nbsp;Debugging Build Logic:<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; Run <code>gradle help -Dorg.gradle.debug=true</code>&nbsp; &amp; attach a remote debugger to port 5005.<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Use <code>--console=verbose</code> in gradle commands<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;</p>\n\n<h2>Maven and Gradle Relationship</h2>\n\n<p><strong>Gradle Scopes vs Maven Scopes</strong><br />\n&nbsp;&nbsp; &nbsp;Your build should not contain dependencies that are not required.<br />\n&nbsp;&nbsp; &nbsp;There are dependencies required to build a module, and then dependencies required to build a module depending on it. Maven does not make this distinction but Gradle does.</p>\n\n<p><br />\n&nbsp;&nbsp; &nbsp;Maven &#39;<code>compile</code>&#39; scope =&gt; Gradle has two &#39;<code>implementation</code>&#39; and &#39;<code>api</code>&#39;. &#39;api&#39; requires Java Library plugin, &#39;implementation&#39; just requires Java Plugin. &#39;api&#39; is useful if you are building a library project instead of an application.<br />\n&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp; &nbsp;Maven &#39;<code>runtime</code>&#39; =&gt; Gradle &#39;<code>runtimeOnly</code>&#39;<br />\n&nbsp;&nbsp; &nbsp;Maven &#39;<code>test</code>&#39; =&gt; &#39;<code>testImplementation</code>&#39; and &#39;<code>testRuntimeOnly</code>&#39;<br />\n&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp; &nbsp;Maven &#39;<code>provided</code>&#39; =&gt; Gradle &#39;<code>compileOnly</code>&#39; Note that the War Plugin adds providedCompile and providedRuntime dependency configurations. These behave slightly differently from compileOnly and simply ensure that those dependencies aren&rsquo;t packaged in the WAR file. However, the dependencies are included on runtime and test runtime classpaths, so use these configurations if that&rsquo;s the behavior you need.<br />\n&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp; &nbsp;&#39;<code>import</code>&#39; =&gt; ... See https://docs.gradle.org/current/userguide/migrating_from_maven.html#migmvn:making_a_case<br />\n&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp; &nbsp;If you are building a library &amp; have optional features.<br />\n&nbsp;&nbsp; &nbsp;https://docs.gradle.org/current/userguide/feature_variants.html#feature_variants<br />\n&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp; &nbsp;BOM (Bill Of Materials): A POM which has packaging type of &#39;pom&#39;<br />\n&nbsp;&nbsp; &nbsp;</p>\n\n<pre>\n<code class=\"language-javascript\">dependencies {\n        implementation platform('org.springframework.boot:spring-boot-dependencies:1.5.8.RELEASE') // (1)\n\n        implementation 'com.google.code.gson:gson' // (2)\n        implementation 'dom4j:dom4j'\n}</code></pre>\n\n<p>&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp; &nbsp;https://docs.gradle.org/current/userguide/managing_transitive_dependencies.html#sec:bom_import<br />\n&nbsp;&nbsp; &nbsp;Gradle allows you to import <code>&lt;dependencyManagement&gt;</code> dependencies from any POM even which are not BOM using platform() and enforcedPlatform()</p>\n\n<h2>&nbsp;</h2>\n\n<h2>Gradle Multi-module Project Setup</h2>\n\n<p><strong>The Java Platform Plugin</strong></p>\n\n<p>The Java Platform plugin brings the ability to declare platforms for the Java ecosystem. A platform can be used for different purposes:</p>\n\n<p>&nbsp;&nbsp; &nbsp;- a description of modules which are published together (and for example, share the same version)<br />\n&nbsp;&nbsp; &nbsp;- a set of recommended versions for heterogeneous libraries. A typical example includes the Spring Boot BOM<br />\n&nbsp;&nbsp; &nbsp;- sharing a set of dependency versions between subprojects</p>\n\n<p>A platform is a special kind of software component which doesn&rsquo;t contain any sources: it is only used to reference other libraries, so that they play well together during dependency resolution.<br />\nPlatforms can be published as Gradle Module Metadata and Maven BOMs.</p>\n\n<p>The java-platform plugin cannot be used in combination with the java or java-library plugins in a given project. Conceptually a project is either a platform, with no binaries, or produces binaries.<br />\n&nbsp;</p>\n\n<p id=\"sub:terminology_dependency_constraint\"><a href=\"https://docs.gradle.org/current/userguide/dependency_management_terminology.html#sub:terminology_dependency_constraint\">Dependency constraint</a></p>\n\n<p>A dependency constraint defines requirements that need to be met by a module to make it a valid resolution result for the dependency. For example, a dependency constraint can narrow down the set of supported module versions. Dependency constraints can be used to express such requirements for transitive dependencies. For more information, see the sections on&nbsp;<a href=\"https://docs.gradle.org/current/userguide/dependency_constraints.html#dependency-constraints\">upgrading</a>&nbsp;and&nbsp;<a href=\"https://docs.gradle.org/current/userguide/dependency_downgrade_and_exclude.html#downgrading_versions_and_excluding_dependencies\">downgrading</a>&nbsp;transitive dependencies.</p>\n\n<pre>\n<code class=\"language-java\">dependencies {\n\n    api platform(\"org.springframework.boot:spring-boot-dependencies:2.3.8.RELEASE\")\n    \n    constraints {\n        api project(\":\")\n        api project(\":module_name\")\n\n        api \"com.google.guava:guava:28.2-jre\"\n    }\n}</code></pre>\n\n<p><a href=\"https://docs.gradle.org/current/userguide/declaring_dependencies.html#sec:what-are-dependency-configurations\" target=\"_blank\"><strong>Declaring Dependencies</strong></a></p>\n\n<p>Every dependency declared for a Gradle project applies to a specific scope. For example some dependencies should be used for compiling source code whereas others only need to be available at runtime. Gradle represents the scope of a dependency with the help of a&nbsp;<a href=\"https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.Configuration.html\">Configuration</a>. Every configuration can be identified by a unique name.</p>\n\n<p>Many Gradle plugins add pre-defined configurations to your project. The Java plugin, for example, adds configurations to represent the various classpaths it needs for source code compilation, executing tests and the like. See&nbsp;<a href=\"https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_plugin_and_dependency_management\">the Java plugin chapter</a>&nbsp;for an example.</p>\n\n<p>Configurations are inheritable (e.g. what is required by code will also be required by tests hence it makes sense to just inherit the dependencies for code). E.g.:</p>\n\n<pre>\n<code class=\"language-java\">configurations {\n    smokeTest.extendsFrom testImplementation\n}\n\ndependencies {\n    testImplementation 'junit:junit:4.13'\n    smokeTest 'org.apache.httpcomponents:httpclient:4.5.5'\n}</code></pre>\n\n<p>&nbsp;</p>\n\n<pre>\n<code class=\"language-java\">allprojects {\n    group 'com.satya'\n}\n//alprojects applies the given closure to this project and all the sub-projects</code></pre>\n\n<p>&nbsp;</p>\n\n<h2>Gradle Example Plugins &nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</h2>\n\n<p><strong>Spring Boot Plugin</strong><br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;https://docs.spring.io/spring-boot/docs/2.1.6.RELEASE/gradle-plugin/reference/html/<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;</p>\n\n<pre>\n<code class=\"language-javascript\">        plugins {\n            id 'org.springframework.boot' version '2.1.6.RELEASE'\n            id 'java'\n        }\n\n        apply plugin: 'io.spring.dependency-management' //Imports Maven BOM</code></pre>\n\n<p>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;When you apply the io.spring.dependency-management plugin, Spring Boot&rsquo;s plugin will automatically import the spring-boot-dependencies bom from the version of Spring Boot that you are using.<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Can we customize versions specified in BOM?<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;Yes. You have to use property used in BOM.<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;e.g. <code>ext[&#39;slf4j.version&#39;] = &#39;1.7.20&#39;</code><br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;You can use Spring Boot plugin without applying it &amp; yet enjoying the dependency-management-plugin that it has embedded in it.</p>\n\n<pre>\n<code class=\"language-javascript\">        plugins {\n            id 'org.springframework.boot' version '2.1.6.RELEASE' apply false\n        }\n\n        apply plugin: 'io.spring.dependency-management'\n\n        dependencyManagement {\n            imports {\n                mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES\n            }\n        }</code></pre>\n\n<p><br />\n<br />\n&nbsp;</p>\n", "authorId": 1, "subject": "devops", "tags": [], "img": "/images/lambda.jpg", "summary": "Gradle is an advanced tooling system which can remove painpoints from project building phase.", "lastUpdated": "2021-06-06 15:51:29.941954"}