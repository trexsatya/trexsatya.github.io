{"name": "Designing a DBMS", "id": 259, "content": "<p>Who is going to use this system?</p>\n\n<blockquote>\n<p>&quot;Some people in my organisation&quot;</p>\n</blockquote>\n\n<p>Ok, how are they going to communicate with our designed DBMS?</p>\n\n<blockquote>\n<p>&quot;Som sort of protocol, I don&#39;t know. My people will use an app <em>(client)</em>&nbsp;which will directly or indirectly request your DBMS?&quot;</p>\n</blockquote>\n\n<p>What are they going to use it for?</p>\n\n<blockquote>\n<p>&quot;Umm.. they might request your DBMS to store some data like their name, email, phone etc..., and later on they might want to retrieve that data, maybe in huge amount like an admin could request data for all the employees....&quot;</p>\n</blockquote>\n\n<p>&nbsp;</p>\n\n<hr />\n<p>We have a problem, it is pretty much well-defined: We want to store data, and we want to give data back. Let&#39;s work on it.</p>\n\n<p>So, how do we store data, and where?</p>\n\n<p>- Of course memory!! But, we have two different kinds of <strong>memories</strong> in computers <em>(we know it from our domain knowledge, we know that they are drastically different from our experience, as well as analysis-based knowledge).&nbsp;</em>So, <strong>where do we store data - in volatile Main Memory, or non-volatile Persistent Storage (like disks)?</strong></p>\n\n<p>- And, can we just store the given data as it is like ......</p>\n\n<p><em>(Discourse continues)</em></p>\n\n<p>We come to conclusion that we should store data in a <em>formatted</em> way.</p>\n\n<p>Record, Table,&nbsp;</p>\n\n<p>Normalisation, References etc</p>\n\n<p>.....</p>\n\n<p>&nbsp;</p>\n\n<hr />\n<p><span style=\"color:#2c3e50;\"><strong>Where does this DBMS lie, what other system contains it, and what other systems interact with it, what does it depend upon?</strong></span></p>\n\n<p>Of course, it would work on a computer, within an <strong>Operating System</strong>.&nbsp;</p>\n\n<p>Domain Knowledge of Operating Systems:</p>\n\n<p>OS Thread: a single/distinct line/unit of execution (of program), ..... Aka Kernel-threads (or k-threads). These threads alter execution as per schedule given by OS kernel scheduler.</p>\n\n<p>OS Process: OS Thread + a private address-space (accessible by all OS-Threads within it), and private context (including OS resource handles, and security context)...</p>\n\n<p>&nbsp;</p>\n\n<p>Lightweight Thread Package: an application-level (outside of OS) construct that allows multiple threads within single OS process, the difference is that these threads are scheduled by application-level scheduler, which makes it easy to control as per our requirements (the downside being that if some thread is blocked on IO, all threads within this process will block).</p>\n\n<p>There are general-purpose LTPs available, but DBMS can customize them as well.</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n", "authorId": 1, "subject": "architecture", "tags": [], "img": "", "summary": "string", "lastUpdated": "2021-01-31 08:34:19.333840"}