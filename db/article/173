{"name":"CORS and PreFlight","id":173,"content":"<p>Cross-Domain Requests:</p>\n\n<p>When your website makes Ajax requests from browser, you might see this:</p>\n\n<p><q>XMLHttpRequest cannot load&nbsp;<a href=\"http://external.service/\" rel=\"nofollow\">http://external.service/</a>. No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin &#39;<a href=\"http://my.app/\" rel=\"nofollow\">http://my.app</a>&#39; is therefore not allowed access.</q></p>\n\n<p>What&#39;s this CORS?</p>\n\n<p>CORS is a protocol which browsers follow, and which secures&nbsp;your API from being used from everywhere (any public domain).&nbsp;</p>\n\n<pre>\n<code class=\"language-javascript\">//Serve request at http://abc.com/api\n\n//A page on local site -&gt; http://localhost:8080/index.html\nvar API_HOST = 'http://abc.com/api';\n\n    fetch( API_HOST+\"/x\")\n    .then( function(response) {\n          if(response.ok) { return response.json() }\n          else throw new Error('Response was not ok.');\n    }).then(res =&gt; console.log(res))\n\n$.ajax({\n\turl: API_HOST+\"/articles/java\",\n\tsuccess: res =&gt; console.log(res),\n\terror: e =&gt; console.log(e)\n})</code></pre>\n\n<p>This results in something like following error:</p>\n\n<p><q>Failed to load http://abc.com/api/x: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin &#39;http://localhost:8080&#39; is therefore not allowed access. If an opaque response serves your needs, set the request&#39;s mode to &#39;no-cors&#39; to fetch the resource with CORS disabled.</q></p>\n\n<p>Using option dataType: &#39;jsonp&#39; in ajax request may&nbsp; work in someplaces.</p>\n\n<p>Disabling CORS may also work, but not in all cases.</p>\n\n<p>CORS verification is cached by browser.&nbsp;</p>\n\n<p>How to solve this?</p>\n\n<p>The most effective solution is that the API server sends these headers in responses:</p>\n\n<p>&nbsp; &nbsp;&nbsp;</p>\n\n<pre>\n<code class=\"language-html\">Access-Control-Allow-Origin: *\nAccess-Control-Allow-Methods: 'GET,PUT,POST,DELETE'\nAccess-Control-Allow-Headers: 'Origin, X-Requested-With, Content-Type, Accept'\n//possibly others\nAccess-Control-Allow-Credentials: true\n\n</code></pre>\n\n<p>The API server is not required to send these headers for all responses, it would be enough to set these headers only on OPTIONS responses because&nbsp;the CORS spec requires the OPTIONS call to precede <u>simple requests</u>.</p>\n\n<p><u><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests\" target=\"_blank\">What are simple-requests?</a>&nbsp;</u>( requests demanding JSON data are not simple requests)</p>\n\n<p>HTTP request methods that can cause side-effects on server&#39;s&nbsp;data (in particular, for HTTP&nbsp;methods other than&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET\" title=\"The HTTP GET method requests a representation of the specified resource. Requests using GET should only retrieve data.\"><code>GET</code></a>, or for&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST\" title=\"The HTTP POST method sends data to the server. The type of the body of the request is indicated by the Content-Type header.\"><code>POST</code></a>&nbsp;usage with certain&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME types</a>), the specification mandates that browsers &quot;preflight&quot; the request, soliciting supported methods from the server with an HTTP&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/OPTIONS\" title=\"The HTTP OPTIONS method is used to describe the communication options for the target resource. The client can specify a URL for the OPTIONS method, or an asterisk (*) to refer to the entire server.\"><code>OPTIONS</code></a>&nbsp;request method, and then, upon &quot;approval&quot; from the server, sending the actual request with the actual HTTP request method. Servers can also notify clients whether &quot;credentials&quot; (including&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\">Cookies</a>&nbsp;and HTTP Authentication data) should be sent with requests.</p>\n\n<p>&nbsp;</p>\n","authorId":null,"subject":"hidden","tags":null,"img":null,"summary":null,"lastUpdated":null}