{"name":"Generic Gradle for any project","id":99,"content":"<pre>\nimport groovy.json.*\nimport groovy.xml.XmlUtil\n\nimport javax.net.ssl.SSLContext\nimport java.security.cert.CertificateException\nimport java.security.cert.X509Certificate\nimport java.util.concurrent.CountDownLatch\nimport org.apache.http.HttpHost\nimport org.apache.http.client.methods.CloseableHttpResponse\nimport org.apache.http.client.methods.*\nimport org.apache.http.client.protocol.HttpClientContext\nimport org.apache.http.conn.ssl.NoopHostnameVerifier\nimport org.apache.http.impl.client.HttpClients\nimport org.apache.http.ssl.SSLContextBuilder\nimport org.apache.http.ssl.TrustStrategy\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.PropertiesConfiguration;\nimport org.apache.commons.configuration.PropertiesConfigurationLayout;\n\nbuildscript{\n    repositories{\n        maven { url &quot;https://artifactory-1.dts.fm.rbsgrp.net/artifactory/agilemarkets-all-repos&quot; }\n        maven { url uri(&#39;C:\\\\Dev\\\\mavenRepo&#39;) }\n        flatDir { dirs &#39;libs&#39; }\n    }\n    dependencies{\n//        classpath group: &#39;org.apache.httpcomponents&#39;, name: &#39;httpclient&#39;, version: &#39;4.5.3&#39;\n        classpath fileTree( dir: &#39;libs&#39;)\n        classpath group: &#39;commons-configuration&#39;, name: &#39;commons-configuration&#39;, version: &#39;1.10&#39;\n    }\n}\n\ngroup &#39;enablements&#39;\nversion &#39;1.0-SNAPSHOT&#39;\n\napply plugin: &#39;java&#39;\n\nsourceCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    testCompile group: &#39;junit&#39;, name: &#39;junit&#39;, version: &#39;4.11&#39;\n}\n\n\ntask checkoutFromStash{}\ntask fixDependencies {}\ntask buildAll {}\ntask runELK {}\ntask runJavaProjects {}\ntask updateAllProjects {}\ntask synchronizeProjectVersions(){}\ntask gitStatusAllProjects {}\ntask undoAll {}\ntask updateUrls {}\n\ndef uiProjects = [&quot;enab-app-configuration&quot;,&quot;enab-blotter&quot;,&quot;enab-contact&quot;,&quot;enab-container&quot;,&quot;enab-data&quot;,&quot;enab-helper&quot;,&quot;enab-look-ups&quot;,\n                  &quot;enab-nav-menu&quot;,&quot;enab-navigation&quot;,&quot;enab-response-modal&quot;,&quot;enab-sub-navigation&quot;,&quot;legal-acceptance&quot;]\n\ndef javaProjects = [&quot;enab-services-domain&quot;,&quot;enab-services-connectivity&quot;,&quot;enab-services-api&quot;,&quot;enab-services-batch&quot;,&quot;enab-services-standalone&quot;,\n                    &quot;enab-activiti-standalone&quot;,&quot;enab-legal-standalone&quot;]\n\ndef baseDir = &quot;C:/Dev&quot;\ndef (uiProjectsDir, javaPojectsDir) = [ new File(baseDir, &quot;EbalementsUI&quot;), new File(baseDir, &quot;EbalementsAPI&quot;) ].collect { if(!it.exists()) it.mkdirs(); return it}\n\nString username = System.properties[&#39;user.name&#39;]\ndef localhost = InetAddress.getLocalHost().getHostName().toLowerCase();\n\ncheckoutFromStash.doLast {\n    uiProjects. findAll {! new File(uiProjectsDir.absolutePath, it).exists()}.each { project -&gt;\n        exec {\n            workingDir uiProjectsDir.absolutePath\n            commandLine &quot;git&quot;, &quot;clone&quot;, &quot;https://kumatye@stash.dts.fm.rbsgrp.net/scm/amenablements/${project}.git&quot;\n        }\n    }\n\n    javaProjects.findAll {! new File(javaPojectsDir.absolutePath, it).exists()}.each { project -&gt;\n        exec {\n            workingDir javaPojectsDir.absolutePath\n            commandLine &quot;git&quot;, &quot;clone&quot;, &quot;https://$username@stash.dts.fm.rbsgrp.net/scm/amenablements/${project}.git&quot;\n        }\n    }\n    //Clone other dependencies\n    if(! new File(uiProjectsDir.absolutePath, &quot;ftm-task&quot;).exists())\n    exec {\n        workingDir uiProjectsDir.absolutePath\n        commandLine &quot;git&quot;, &quot;clone&quot;, &quot;https://$username@stash.dts.fm.rbsgrp.net/scm/ftm/ftm-task.git&quot;\n    }\n}\n\ndef updatePropertyInPropertiesFile(file, action){\n    PropertiesConfiguration config = new PropertiesConfiguration();\n    PropertiesConfigurationLayout layout = new PropertiesConfigurationLayout(config);\n    layout.load(new InputStreamReader(new FileInputStream(file)));\n\n    action config\n\n    layout.save(new FileWriter(file, false));\n}\n\nupdateUrls.doLast {\n\n    updatePropertyInPropertiesFile(new File(&quot;$javaPojectsDir/enab-legal-standalone/src/main/dist/etc/properties/local.properties&quot;)){\n        it.setProperty(&quot;agreement.accept.url&quot;, &quot;http://${localhost}.fm.rbsgrp.net:30105/amenablements/acceptAgreement&quot;)\n        it.setProperty(&quot;notification.upload.attachment.url&quot;, &quot;https://dev.agilemarkets.com/api/notifications/v1/attachments/&quot;)\n    }\n\n    updatePropertyInPropertiesFile(new File(&quot;$javaPojectsDir/enab-services-standalone/src/main/dist/etc/properties/local.properties&quot;)){\n        it.setProperty(&quot;activiti.url&quot;, &quot;http://${localhost}.fm.rbsgrp.net:30205/enabactiviti/task/&quot;)\n        it.setProperty(&quot;notification.service.url.post&quot;, &quot;https://dev.agilemarkets.com/api/notifications/v1/notifications/&quot;)\n    }\n\n    updatePropertyInPropertiesFile(new File(&quot;$javaPojectsDir/enab-activiti-standalone/src/main/dist/etc/properties/local.properties&quot;)){\n        it.setProperty(&quot;activiti.url&quot;, &quot;http://${localhost}.fm.rbsgrp.net:30205/enabactiviti/task/&quot;)\n    }\n\n}\n\ndef undo = { project -&gt;\n    println &quot;\\n&gt;&gt;&gt; Resetting $project \\n&quot;\n    try {\n        exec {\n            workingDir project.absolutePath\n            commandLine &quot;git&quot;, &quot;reset&quot;, &quot;--hard&quot;\n        }\n    } catch (e){\n        println &quot;Error: $e&quot;\n        e.printStackTrace()\n    }\n}\n\ndef gitStash = { project -&gt;\n    println &quot;\\n&gt;&gt;&gt; Stashing changes in $project \\n&quot;\n    try {\n        exec {\n            workingDir project.absolutePath\n            commandLine &quot;git&quot;, &quot;stash&quot;\n        }\n    } catch (e){\n        println &quot;Error: $e&quot;\n        e.printStackTrace()\n    }\n}\n\ndef gitUnstash = { project -&gt;\n    println &quot;\\n&gt;&gt;&gt; Taking stashed changes in $project \\n&quot;\n    try {\n        exec {\n            workingDir project.absolutePath\n            commandLine &quot;git&quot;, &quot;stash&quot;, &quot;pop&quot;\n        }\n    } catch (e){\n        println &quot;Error: $e&quot;\n        e.printStackTrace()\n    }\n}\n\ndef gitPull = { project -&gt;\n    println &quot;\\n&gt;&gt;&gt; Pulling feature/develop from $project \\n&quot;\n    try {\n        exec {\n            workingDir project.absolutePath\n            commandLine &quot;git&quot;, &quot;pull&quot;, &quot;--all&quot;\n        }\n    } catch (e){\n        println &quot;Error: $e&quot;\n        e.printStackTrace()\n    }\n}\n\ndef gitCheckout = { project, branch -&gt;\n    println &quot;\\n&gt;&gt;&gt; Switching to branch feature/develop from $project \\n&quot;\n    try {\n        exec {\n            workingDir project.absolutePath\n            commandLine &quot;git&quot;, &quot;checkout&quot;, branch\n        }\n    } catch (e){\n        println &quot;Error: $e&quot;\n        e.printStackTrace()\n    }\n}\n\ndef gitStatus = { project -&gt;\n    println &quot;\\n&gt;&gt;&gt; Git Status for $project \\n&quot;\n    try {\n        exec {\n            workingDir project.absolutePath\n            commandLine &quot;git&quot;, &quot;status&quot;\n        }\n    } catch (e){\n        println &quot;Error: $e&quot;\n        e.printStackTrace()\n    }\n}\n\nupdateAllProjects.doLast {\n    uiProjects. collect { new File(uiProjectsDir.absolutePath, it) }.findAll { it.exists()}.each { project -&gt;\n//        gitStash project\n        gitPull project\n        gitCheckout project, &quot;feature/develop&quot;\n//        gitUnstash project\n    }\n\n    javaProjects.collect {new File(javaPojectsDir.absolutePath, it)}.findAll { it.exists()}.each { project -&gt;\n//       gitStash project\n       gitPull project\n       gitCheckout project, &quot;feature/develop&quot;\n//       gitUnstash project\n    }\n}\n\nsynchronizeProjectVersions.doLast {\n    def versions = javaProjects.collect {new File(javaPojectsDir.absolutePath, it)}.findAll { it.exists()}.collectEntries { project -&gt;\n        def pom = new XmlSlurper().parse(new File(project, &quot;pom.xml&quot;))\n        [ (project.name) : pom.version.toString()]\n    }\n\n    println &quot;synchronizeProjectVersions : (${versions}) -&gt; &quot;\n    def slurper = new XmlSlurper(false, false);\n    javaProjects.collect {new File(javaPojectsDir.absolutePath, it)}.findAll { it.exists()}.each { project -&gt;\n        def pomFile = new File(project, &quot;pom.xml&quot;)\n        def pom = slurper.parse(pomFile)\n\n        boolean modified = false\n        pom.dependencies.dependency.each { dep -&gt;\n            println &quot;Project: $project Dependency: ${versions.containsKey( dep.artifactId.toString()) ? &quot;${dep.version} as&quot; : &#39;&#39;}&quot;\n            if(versions.containsKey( dep.artifactId.toString())){\n                dep.version = versions[dep.artifactId.toString()]\n                modified = true\n            }\n        }\n        pom.dependencyManagement.dependencies.dependency.each { dep -&gt;\n            println &quot;Project: $project Dependency: ${versions.containsKey( dep.artifactId.toString()) ? &quot;${dep.version} as&quot; : &#39;&#39;}&quot;\n            if(versions.containsKey( dep.artifactId.toString())){\n                dep.version = versions[dep.artifactId.toString()]\n                modified = true\n            }\n        }\n        if(modified) pomFile.newWriter().withWriter{ w -&gt; w &lt;&lt; XmlUtil.serialize(pom) }\n    }\n}\n\ngitStatusAllProjects.doLast {\n    uiProjects. collect { new File(uiProjectsDir.absolutePath, it) }.findAll { it.exists()}.each { gitStatus it }\n\n    javaProjects.collect {new File(javaPojectsDir.absolutePath, it)}.findAll { it.exists()}.each { gitStatus it }\n}\n\nundoAll.doLast {\n    uiProjects. collect { new File(uiProjectsDir.absolutePath, it) }.findAll { it.exists()}.each { undo it }\n    javaProjects.collect {new File(javaPojectsDir.absolutePath, it)}.findAll { it.exists()}.each { undo it }\n}\n\ndef routes = [\n        &quot;/api/amenablements/&quot;: &quot;http://${localhost}.fm.rbsgrp.net:30105/amenablements/&quot;,\n        &quot;/api/enabactiviti/&quot;: &quot;http://${localhost}.fm.rbsgrp.net:30205/enabactiviti/&quot;,\n        &quot;/api/ftm/&quot; : &quot;https://${localhost}.fm.rbsgrp.net:15080/ftm/task-form/&quot;\n]\n\nfixDependencies.doLast{\n    def json = new JsonSlurper().parse( new File(uiProjectsDir, &quot;enab-container/dependencies.json&quot;))\n\n    json.routes = routes\n\n    println(new JsonBuilder(json).toPrettyString())\n}\n\ndef processesStarted = [] as Set\n\nrunJavaProjects.doLast{\n\n    String mavenPath = &quot;${projectDir}/maven/apache-maven-3.5.0/bin&quot;\n    def projectsToRun = [&quot;enab-legal-standalone&quot;, &quot;enab-activiti-standalone&quot;, &quot;enab-services-standalone&quot;]\n\n    Runtime.getRuntime().addShutdownHook(new Thread({\n        processesStarted.each {\n            it.destroyForcibly()\n            println &quot;killed process $it&quot;\n        }\n    }))\n\n    def processes = projectsToRun.collect{ project -&gt;\n        return {\n            def process = [&quot;$mavenPath/mvn.cmd&quot;, &quot;-f&quot;, &quot;${javaPojectsDir}/$project/pom.xml&quot;, &quot;clean&quot;, &quot;install&quot;, &quot;--settings&quot;, &quot;settings-enab.xml&quot;, &quot;exec:java&quot;,\n                           &#39;-Dexec.mainClass=&quot;com.rbs.amservices.server.container.ContainerBootstrap&quot;&#39;, &#39;-Dexec.args=&quot;%modulepath&quot;&#39;].execute();\n\n            processesStarted &lt;&lt; process\n\n            process.waitForProcessOutput(new FileOutputStream(new File(&quot;logs&quot;,&quot;${project}.log&quot;)), new FileOutputStream(new File(&quot;logs&quot;,&quot;${project}_error.log&quot;)))\n            println(&quot;Finished Running project $project&quot;)\n        }\n    }\n\n    processes.addAll(elkProcesses(processesStarted))\n    waitToFinishAll(processes)\n\n}\n\ndef elkProcesses(processesStarted){\n    return [\n            {\n                def out = new FileOutputStream(new File(&quot;logs&quot;,&quot;elasticsearch.log&quot;))\n                def process = &quot;${projectDir}/ELK/elasticsearch-5.4.0/elasticsearch-5.4.0/bin/elasticsearch.bat&quot;.execute();\n                processesStarted &lt;&lt; process\n                process.waitForProcessOutput(out, out)\n            },\n            {\n                def out = new FileOutputStream(new File(&quot;logs&quot;,&quot;logstash.log&quot;))\n                def process = [&quot;${projectDir}/ELK/logstash-5.4.0/logstash-5.4.0/bin/logstash.bat&quot;, &quot;-f&quot;, &quot;$projectDir/ELK/test.conf&quot;].execute();\n                processesStarted &lt;&lt; process\n                process.waitForProcessOutput(out, out)\n            },\n            {\n                def out = new FileOutputStream(new File(&quot;logs&quot;,&quot;kibana.log&quot;))\n                def process = &quot;${projectDir}/ELK/kibana-5.4.0-windows-x86/kibana-5.4.0-windows-x86/bin/kibana.bat&quot;.execute();\n                processesStarted &lt;&lt; process\n                process.waitForProcessOutput(out, out)\n            }\n    ]\n}\n\nrunELK.doLast {\n    waitToFinishAll(elkProcesses(processesStarted))\n}\n\ntask  info {\n    println &quot;Gradle version: &quot; + project.getGradle().getGradleVersion()\n    println &quot;Groovy version: &quot; + GroovySystem.getVersion()\n\n//    println &quot;Local Maven Repo: ${localMavenRepoDir()}&quot;\n//    try {\n//        exec {\n//            commandLine &quot;${mavenCommandPath()}&quot;, &quot;--version&quot;\n//        }\n//    } catch (e){ println e }\n}\n\n\nbuildAll.doLast{\n    String mavenPath = &quot;${projectDir}/maven/apache-maven-3.5.0/bin&quot;\n\n    def projectsInOrderToBuild = [&quot;enab-services-domain&quot;, &quot;enab-services-connectivity&quot;, &quot;enab-services-api&quot;, &quot;enab-services-batch&quot;,\n                                        &quot;enab-services-standalone&quot;, &quot;enab-activiti-standalone&quot;, &quot;enab-legal-standalone&quot;]\n\n    def rootLogFolder = new File(&quot;logs/buildlogs&quot;)\n\n    projectsInOrderToBuild.each {\n        def file = new File(rootLogFolder,&quot;${it}_build.log&quot;)\n        if(file.exists()) file.delete()\n    }\n\n    def wasSuccessful = {\n        return new File(rootLogFolder, &quot;${it}_build.log&quot;).text.contains(&quot;BUILD SUCCESS&quot;)\n    }\n\n    projectsInOrderToBuild.collect { project -&gt;\n        return {\n            [&quot;$mavenPath/mvn.cmd&quot;, &quot;-f&quot;, &quot;${javaPojectsDir}/$project/pom.xml&quot;, &quot;clean&quot;, &quot;install&quot;, &quot;--settings&quot;, &quot;settings-enab.xml&quot;].execute()\n                    .waitForProcessOutput(new FileOutputStream(new File(rootLogFolder,&quot;${project}_build.log&quot;)), new FileOutputStream(new File(rootLogFolder,&quot;${project}_build_error.log&quot;)))\n\n            println(&quot;Finished building project $project ${if(wasSuccessful(project)) &quot;Build Succeeded&quot; else &quot;Build Failed&quot;}&quot; )\n        }\n    }.each { it() }\n}\n\ntask testScript{}\ntestScript.doLast{\n    searchInSolr &#39;satyen&#39;\n}\n\ntask deleteEnablementLogsFromELK {}\ndeleteEnablementLogsFromELK.doLast{\n    new RestClient(&#39;http://localhost:9200&#39;).with {\n        println delete(&#39;/logstash-enab-*&#39;)\n    }\n}\n\ntask getCounterparty{}\n\ngetCounterparty.doLast{\n    Scanner scanner = new Scanner(System.in);\n\n    def countryCode = project.properties[&#39;country&#39;] ?: scanner.next()\n    countryCode = countryCode.toUpperCase()\n\n    def client = new RestClient(&quot;http://emcs-uat.fm.rbsgrp.net&quot;)\n\n    def mapCisToAliases = [:]\n    client.with {\n        def resp = get(&quot;/solr/services/clients/L4/?&amp;fq=countryOfIncorporation:$countryCode&amp;indent=on&quot;)\n        def docs = resp.response.docs\n\n        docs.each{\n            def cisCode = it.cisCode\n            resp = get(&quot;/solr/services/clients/L5/?&amp;q=$cisCode&amp;indent=on&quot;)\n\n            def res = resp.response.docs.findAll{ Boolean.valueOf(it.active) }.collect{ it.aliasValues }\n            if(res) println &quot;$cisCode -&gt; $res&quot;\n\n//            mapCisToAliases[cisCode] = resp.response.docs.findAll{ Boolean.valueOf(it.active) }.collect{ it.aliasValues }\n        }\n    }\n\n//    println mapCisToAliases\n}\n\ndef waitToFinishAll(actions){\n    def latch = new CountDownLatch(actions.size())\n    actions.each { action -&gt;\n        new Thread({\n            action()\n            latch.countDown()\n        }).start()\n    }\n    latch.await()\n}\n\nclass RestClient {\n    def baseUrl;\n\n    def httpClient, target, context, jsonSlurper;\n\n    RestClient(url){\n        this.baseUrl = url;\n\n        SSLContext sslContext = new SSLContextBuilder()\n                .loadTrustMaterial(null, new TrustStrategy() {\n            @Override\n            boolean isTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n                return true\n            }\n        }).build();\n\n        httpClient = HttpClients.custom()\n                .setSslcontext(sslContext)\n                .setSSLHostnameVerifier(new NoopHostnameVerifier())\n                .build();\n\n        target = HttpHost.create(baseUrl)\n        context = HttpClientContext.create();\n        jsonSlurper = new JsonSlurper()\n    }\n\n    def delete(reqPath){\n        HttpDelete httpDelete = new HttpDelete(reqPath)\n        CloseableHttpResponse response = httpClient.execute(target, httpDelete, context);\n        if(response.getStatusLine().statusCode != 200){\n            println &quot;Request DELETE $reqPath failed. Reason: ${response.getStatusLine().reasonPhrase} StatusCode: ${response.getStatusLine().statusCode}&quot;\n            return [:];\n        }\n        return jsonSlurper.parseText(responseAsString(response))\n    }\n\n    def get(reqPath){\n        HttpGet get = new HttpGet(reqPath)\n        def response = httpClient.execute(target, get, context)\n        if(response.getStatusLine().statusCode != 200){\n            println &quot;Request GET $reqPath failed. Reason: ${response.getStatusLine().reasonPhrase} StatusCode: ${response.getStatusLine().statusCode}&quot;\n            return [:];\n        }\n        return jsonSlurper.parseText(responseAsString(response))\n    }\n\n    static responseAsString(it){\n        ByteArrayOutputStream baos = new ByteArrayOutputStream()\n        it.entity.writeTo(baos)\n        new String(baos.toByteArray())\n    }\n\n}\n\ndef searchInSolr(search){\n    if(search){\n        new RestClient(&#39;http://emcs-uat.fm.rbsgrp.net&#39;).with {\n            def res = get(&quot;/solr/services/users/?&amp;q=$search&quot;)\n            println res\n        }\n    }\n}\n\ndef parseString(){\n    def str = &quot;&quot;&quot;{Z33DRAU= a [abc= x,y = z [xyz=1] ] }&quot;&quot;&quot;\n\n    def stack = new Stack()\n    def delimiter = null\n    def token = &quot;&quot;\n\n    str = str.split(&#39;&#39;) as List\n    int cntr = 1\n    str.each {\n        if (it == &#39;[&#39;){\n            delimiter = &quot;[&quot;;\n            stack.push([ token ])\n            token = &quot;&quot;\n        } else if(it == &#39;]&#39;){\n            stack.peek().add(token)\n            def top = stack.pop()\n            delimiter = null;\n            println &quot;$cntr -&gt; $top&quot;\n            cntr++\n        } else if(delimiter == &#39;[&#39; &amp;&amp; it == &#39;,&#39;){\n            stack.peek().add(token)\n            token = &quot;&quot;\n        } else {\n            token += it\n        }\n    }\n}\n</pre>\n","authorId":null,"subject":"hidden","tags":null,"img":null,"summary":null,"lastUpdated":null}