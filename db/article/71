{"name":"Classes, Objects, Methods and Packages","id":71,"content":"<h2><strong><span style=\"font-size:16px;\">The concepts:</span></strong></h2>\n\n<p><strong>Class</strong>: Class represents a category. Obviously, there can be many things in the same category.</p>\n\n<p><strong>Object:</strong> Object is a thing of some category. So there can be many objects with the same class.</p>\n\n<p><strong>A method </strong>is just something that is used to talk to objects and classes. A static method is used to talk to the class, and non-static method is used to talk to objects.</p>\n\n<p>Types&nbsp;are the building blocks of any statically-typed language. In Java Types are represented by writing &quot;classes&quot;.</p>\n\n<h2><strong><span style=\"font-size:16px;\">How Does a Class Look Like?</span></strong></h2>\n\n<p>A class can be declared in a JAVA&nbsp;file (a file which ends with .java at the end of its name). More than one classes can be declared in a JAVA file. But only one <strong><em>&quot;public&quot; class&nbsp;</em></strong>can be declared in a JAVA file (More detail on <em>public</em> later). This is what a class looks like in simplistic form:</p>\n\n<div>\n<pre>\n<code class=\"language-java\">class NameOfClass {\n     type_of_data variable_name;\n\n     type_of_data method_name(){\n        //......\n        return something;\n     }\n}</code></pre>\n</div>\n\n<p>A class has data and methods inside it.&nbsp; For each <em>data</em>, you have to tell what kind of data (<em>data type</em>) it is. Is it integer number, is it floating point number, is it a String, is it a character, or is it a <strong><em>reference</em></strong>?</p>\n\n<p>Data is stored inside a <strong><em>variable</em></strong>. What is a variable? - It is a name for the location of the computer&#39;s memory where data is stored.</p>\n\n<h2>What is Data Types?</h2>\n\n<p>Data (or information) can be of various types. For example, if you talk about a person, what are the pieces of information regarding a person? - Age, Weight, Name, Address, etc.</p>\n\n<p>Age is a number, Name is multiple characters (alphabets), Address is also multiple characters. Multiple characters combined can be called <strong><em>String</em></strong>.</p>\n\n<p>Weight is also a number, but a different kind of number. It&#39;s <em>floating point</em> number. Example 12.5 kg. The numbers which have a decimal point inside them are called floating point numbers.</p>\n\n<p>Java (and many other languages) provide different types for these sort of information.</p>\n\n<p>Example:</p>\n\n<pre>\n<code class=\"language-java\">int age;\nfloat weight;\nString name;</code></pre>\n\n<p><strong>So why are there different types? Why not a single type for everything and computer automatically decide which one to use?</strong></p>\n\n<p>The answer is: It&#39;s because different types take a different amount of memory to store the information. Example: <code>int </code>takes 4 bytes of memory, <code>float </code>also takes 4 bytes, <code>long </code>takes 8 bytes, <code>short</code> takes 2 bytes.</p>\n\n<p><em>Example</em>: if you want to store a person&#39;s &quot;age&quot; in a variable, and the computer decided that it would store it as an integer (<code>int</code>). An integer takes 4 bytes of memory. However, the maximum value of a person&#39;s age can be what? 100,150? Would it not be better to store the &quot;age&quot; in a <code>short</code> variable, which is enough for it and which will take less memory?&nbsp;</p>\n\n<p>You as programmer best know how much value the information can take at max in most of the situations, so you can better decide which type to use, so that memory is not wasted.</p>\n\n<p><strong>What are the references?</strong></p>\n\n<p>There are two kinds of information regarding anything - Primitive, and Complex. Primitive information can be stored as -<code>int,</code>&nbsp;<code>float,&nbsp;long,...</code>etc.</p>\n\n<p>Then there is complex information which is being made by using other primitive information. The best way to store Complex information in Java is by using a class. Example: Address is made from other pieces of information:-</p>\n\n<pre>\n<code class=\"language-java\">class Address {\n\tshort streetNumber;\n\tshort buildingNumber;\n\tString streetName;\n\tString phoneNumber;\n}</code></pre>\n\n<p>So now, if I want to describe all the information regarding a person, I will write something like this:-</p>\n\n<pre>\n<code class=\"language-java\">class Person {\n  short age;  //This is primitive data \n  String name;\n  Address address; //This is 'reference'\n}</code></pre>\n\n<p>A &quot;<strong><em>reference</em></strong>&quot; means we are pointing to another object which will contain other pieces of information.</p>\n\n<p><strong>Reference Type</strong> basically means the class (i.e. type ) of that object.</p>\n\n<p>Visit&nbsp;<a href=\"https://www.w3schools.com/java/java_data_types.asp\" target=\"_blank\">https://www.w3schools.com/java/java_data_types.asp</a></p>\n\n<p><a href=\"https://stackoverflow.com/questions/17814293/what-is-the-size-of-reference-variable-in-java\" target=\"_blank\">How much memory does a reference variable take?</a></p>\n\n<h2>What is a method? How does it look like?</h2>\n\n<p>A method is something using which you can <em>ask</em> the class or object to do something. A method can only be declared in the code body of a class, not outside a class. A method must have the following parts</p>\n\n<ol>\n\t<li>Type of the data it will return (If a method does not want to return anything, use&nbsp;<em>void</em>)</li>\n\t<li>Name of the method</li>\n\t<li>Comma-separated list of arguments inside brackets. Their type&nbsp;and name.</li>\n</ol>\n\n<div>\n<pre>\n<code class=\"language-java\">\nvoid printMyName(){ //This method does not want to return anything. You can call this method and it will listen and do its work, but you will not get anything in return\n}\n\nvoid printMyName(String myName){\n}\n\nvoid printNames(String firstName, String secondName){ //Here you are seeing the various infromations being passed to method. These are called parameters.\n}\n\nString printMyNameAndReturnIt(String myName){ //This method will return something. You can call this method and it will listen and do its work, and you will also get the name in return\n  //  ...\n  return myName;\n}</code>\n</pre>\n</div>\n\n<p>When the return type is not <strong><em>void, then you have to return some object of that return type.</em></strong></p>\n\n<h2><span style=\"font-family:Lucida Sans Unicode,Lucida Grande,sans-serif;\">Why write a method?</span></h2>\n\n<p><span style=\"font-family:Arial,Helvetica,sans-serif;\">Methods include the code which </span><span style=\"font-family:Arial,Helvetica,sans-serif;\">needs</span><span style=\"font-family:Arial,Helvetica,sans-serif;\"> to be run again and </span><span style=\"font-family:Arial,Helvetica,sans-serif;\">again&nbsp;in</span><span style=\"font-family:Arial,Helvetica,sans-serif;\"> the program.</span></p>\n\n<p><span style=\"font-family:Arial,Helvetica,sans-serif;\">To write better programs, start from writing a new method for every task that your program has to do.</span></p>\n\n<p><span style=\"font-family:Arial,Helvetica,sans-serif;\">Using methods, one object can ask the other object to do something e.g. in the following code</span></p>\n\n<pre>\n<code class=\"language-java\">System.out.println(\"Hello\");</code></pre>\n\n<p>We are asking object <em><strong>&quot;out&quot;&nbsp;</strong></em>which is inside <em><strong>System&nbsp;</strong></em>class, to print &quot;Hello&quot; on console (command line). The dot symbol (.) tells which class/object we are talking to.</p>\n\n<p>A method should contain only a few lines of code. One method can call (use) another method. In this way, a task can / should be broken into subtasks.</p>\n\n<h2><span style=\"font-family:Lucida Sans Unicode,Lucida Grande,sans-serif;\">Should I use a&nbsp;</span><span style=\"font-family:Lucida Sans Unicode,Lucida Grande,sans-serif;\">static</span><span style=\"font-family:Lucida Sans Unicode,Lucida Grande,sans-serif;\"> or non-static method?</span></h2>\n\n<p>Methods can be static and non-static. Static methods are used to talk to the class itself, and non-static methods are used to talk to the objects. Which one should you use? - Depends on what you want, they both have different capabilities.</p>\n\n<pre>\n<code class=\"language-java\">class Person {\n   static int count;\n\n   int age;\n   String name;\n\n   static void introduceYourself_Class(){\n      System.out.println(\"Hi I am a class Person. You can use me to create many objects of type Person. So far \"+ count + \" objects of type Person have been created. I cannot tell their name or age, you would have to ask those objects themselves.\");\n   }\n\n   void introduceYourself_Object(){\n      System.out.println(\"Hi I am an object. I represent an instance of \"+this.getClass()+\" with name \"+ this.name+\" and age \"+ this.age +\". I live at this location inside this computer:\"+this);\n   }\n\n   Person(){ //This is constructor, it will be automatically called when you create an object.\n     count = count +1;\n   }\n\n   public static void main(String[] s){\n      Person.introduceYourself_Class();\n\n      Person person1 = new Person();\n      person1.introduceYourself_Object();\n\n      Person.introduceYourself_Class();\n   }\n}</code></pre>\n\n<p>When you run this first time you will see the output like this:-</p>\n\n<p><code>Hi</code><code> I am a class Person. You can use me to create many objects of type Person. So far 0 objects of </code><code>type</code><code> Person have been created. I cannot tell their name or age, you would have to ask those objects themselves.</code><br />\n<code>Hi</code><code> I am an object. I represent an instance of class Person with name null and age 0. I live at this location inside this computer</code><code>:Person@6576fe71</code><br />\n<code>Hi</code><code> I am a class Person. You can use me to create many objects of type Person. So far 1 objects of </code><code>tyep</code><code> Person have been created. I cannot tell their name or age, you would have to ask those objects themselves.</code></p>\n\n<p><strong>Did you notice something? Where did Zero come from? - You never told the count and age to be zero.</strong></p>\n\n<p>What happens is that when compiler <strong>compiles </strong>the program, it assign default values to the static data variables. And when the constructor <strong>runs</strong>, it assigns default values to the non-static members.</p>\n\n<p>The default value of an integer is zero, of a float is 0.0, and of a String (or any reference type) is null.</p>\n\n<h2><span style=\"font-family:Lucida Sans Unicode,Lucida Grande,sans-serif;\">What is an object? And can we create it?</span></h2>\n\n<p><font face=\"Trebuchet MS, Helvetica, sans-serif\">In perspective of the real world: every<strong>thing</strong> is an object.</font></p>\n\n<p><font face=\"Trebuchet MS, Helvetica, sans-serif\">In perspective of Object-Oriented programming language: Object is an instance of a Type (class in Java)&nbsp;</font></p>\n\n<p><font face=\"Trebuchet MS, Helvetica, sans-serif\">In perspective of data: object is a chunk of memory inside the computer; which holds some metadata and some data. More precisely, an object is stored on Heap (which is nothing but a specific area inside memory).</font></p>\n\n<p>To create an object there are many ways:</p>\n\n<ol>\n\t<li>Use &quot;<em>new&quot;</em> operator to call&nbsp;the constructor method.</li>\n\t<li>Use Reflection to call&nbsp;the constructor method.</li>\n\t<li>Use Deserialisation</li>\n\t<li>Use cloning</li>\n\t<li>There are other specialized ways to create objects of specific classes. e.g.&nbsp;</li>\n</ol>\n\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Array creation/initialization for an array&nbsp;<br />\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;String initialization for string objects<br />\n&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Boxing for number objects</p>\n\n<h2><span style=\"font-family:Lucida Sans Unicode,Lucida Grande,sans-serif;\">How do we destroy objects?</span></h2>\n\n<p><span style=\"font-family:Arial,Helvetica,sans-serif;\">One of the beautiful things about Java is that you do not have to destroy objects. A component of Java system (called Garbage Collector) automatically destroys objects which are no longer going to be used.</span></p>\n\n<h2>What are Packages and Why do we need them?</h2>\n\n<p>The name of classes can conflict sometimes. Suppose you create a class named X, and you are using someone else&#39;s <em>library</em> which also contains a class named X. (What is a <em>library</em>? - Basically a .jar file which contains classes, you use libraries to take advantage of other&#39;s code). Now there&#39;s a conflict, you have two classes with the same name, and it would have created problems for the Java runtime system, but fortunately, we have the concept of packages.</p>\n\n<p>A package is basically a string which gets attached before the name of the class when the code is <em>compiled</em>. The idea is to make the class name unique.</p>\n\n<p>How does it look like?</p>\n\n<pre>\n<code class=\"language-java\">package com.satya.a;\n\nclass NameOfTheClass {}</code></pre>\n\n<p>When you compile this code, a class named <code>com.satya.NameOfTheClass</code> would be generated. To use this class then you would have to use the complete name of the class now.</p>\n\n<p>There is one more thing: It is mandatory that you place this JAVA file inside directory <code>com/</code><code>satya/a</code> because its package name is com.satya.a</p>\n\n<p>Now to use this class, you <strong>would have to</strong> import the class first.&nbsp;</p>\n\n<pre>\n<code class=\"language-java\">package com.satya.b;\n\nimport com.satya.a.NameOfTheClass;\n\nclass UseAClass {\n  NameOfTheClass object;\n}</code></pre>\n\n<p>&nbsp;</p>\n","authorId":null,"subject":"linked-to-132","tags":["basic","intro"],"img":null,"summary":null,"lastUpdated":"2018-07-01T13:59:23.110+0000"}