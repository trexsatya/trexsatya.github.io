{"name":"manage using gradle","id":95,"content":"<p>import groovy.json.*</p>\n\n<p>import java.util.concurrent.CountDownLatch</p>\n\n<p>group &#39;enablements&#39;<br />\nversion &#39;1.0-SNAPSHOT&#39;</p>\n\n<p>apply plugin: &#39;java&#39;</p>\n\n<p>sourceCompatibility = 1.8</p>\n\n<p>repositories {<br />\n&nbsp; &nbsp; mavenCentral()<br />\n}</p>\n\n<p>dependencies {<br />\n&nbsp; &nbsp; testCompile group: &#39;junit&#39;, name: &#39;junit&#39;, version: &#39;4.11&#39;<br />\n}</p>\n\n<p><br />\ntask checkoutFromStash{}<br />\ntask fixDependencies {}<br />\ntask buildAll {}<br />\ntask runJavaProjects{}</p>\n\n<p>def uiProjects = []</p>\n\n<p>def javaProjects = []</p>\n\n<p>def baseDir = &quot;C:/Dev&quot;<br />\ndef (uiProjectsDir, javaPojectsDir) = [ new File(baseDir, &quot;&quot;), new File(baseDir, &quot;&quot;) ].collect { if(!it.exists()) it.mkdirs(); return it}</p>\n\n<p>String username = System.properties[&#39;user.name&#39;]<br />\ndef localhost = InetAddress.getLocalHost().getHostName();</p>\n\n<p>checkoutFromStash.doLast {<br />\n&nbsp; &nbsp; uiProjects. findAll {! new File(uiProjectsDir.absolutePath, it).exists()}.each { project -&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; exec {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; workingDir uiProjectsDir.absolutePath<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; commandLine &quot;git&quot;, &quot;clone&quot;, &quot;https://kumatye@stash.../${project}.git&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; }<br />\n&nbsp; &nbsp; }</p>\n\n<p>&nbsp; &nbsp; javaProjects.findAll {! new File(javaPojectsDir.absolutePath, it).exists()}.each { project -&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; exec {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; workingDir javaPojectsDir.absolutePath<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; commandLine &quot;git&quot;, &quot;clone&quot;, &quot;https://$username@stash.../${project}.git&quot;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; }<br />\n&nbsp; &nbsp; }<br />\n&nbsp; &nbsp; //Clone other dependencies<br />\n&nbsp; &nbsp; if(! new File(uiProjectsDir.absolutePath, &quot;ftm-task&quot;).exists())<br />\n&nbsp; &nbsp; exec {<br />\n&nbsp; &nbsp; &nbsp; &nbsp; workingDir uiProjectsDir.absolutePath<br />\n&nbsp; &nbsp; &nbsp; &nbsp; commandLine &quot;git&quot;, &quot;clone&quot;, &quot;https://$username@stash.....git&quot;<br />\n&nbsp; &nbsp; }<br />\n}</p>\n\n<p>def routes = [<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &quot;/api/x/&quot;: &quot;http://${localhost}/..&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />\n]</p>\n\n<p>fixDependencies.doLast{<br />\n&nbsp; &nbsp; def json = new JsonSlurper().parse( new File(uiProjectsDir, &quot;..dependencies.json&quot;))</p>\n\n<p>&nbsp; &nbsp; json.routes = routes</p>\n\n<p>&nbsp; &nbsp; println(new JsonBuilder(json).toPrettyString())<br />\n}</p>\n\n<p>runJavaProjects.doLast{</p>\n\n<p>&nbsp; &nbsp; String mavenPath = &quot;${projectDir}/maven/apache-maven-3.5.0/bin&quot;</p>\n\n<p><br />\n&nbsp; &nbsp; waitToFinishAll(<br />\n&nbsp; &nbsp; &nbsp;[{<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;[&quot;$mavenPath/mvn.cmd&quot;, &quot;-f&quot;, &quot;${javaPojectsDir}/proj1/pom.xml&quot;, &quot;clean&quot;, &quot;install&quot;, &quot;--settings&quot;, &quot;settings-enab.xml&quot;, &quot;exec:java&quot;,<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &#39;-Dexec.mainClass=&quot;com.rbs.amservices.server.container.ContainerBootstrap&quot;&#39;, &#39;-Dexec.args=&quot;%modulepath&quot;&#39;].execute()<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.waitForProcessOutput(new FileOutputStream(new File(&quot;logs&quot;,&quot;enab-legal-standalone.log&quot;)), System.out)<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;println(&quot;Finished legal service&quot;)<br />\n&nbsp; &nbsp; &nbsp;}<br />\n&nbsp; &nbsp; ])</p>\n\n<p>}</p>\n\n<p>def waitToFinishAll(actions){<br />\n&nbsp; &nbsp; def latch = new CountDownLatch(actions.size())<br />\n&nbsp; &nbsp; actions.each { action -&gt;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; new Thread({<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; action()<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; latch.countDown()<br />\n&nbsp; &nbsp; &nbsp; &nbsp; }).start()<br />\n&nbsp; &nbsp; }<br />\n&nbsp; &nbsp; latch.await()<br />\n}</p>\n","authorId":null,"subject":null,"tags":null,"img":null,"summary":null,"lastUpdated":null}