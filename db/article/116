{"name":"Python for Algorithms","id":116,"content":"<div><a href=\"http://www.pythontutor.com/visualize.html#mode=edit\" target=\"_blank\">Python Visualiser</a> is a great tool to help you learn Python</div>\n\n<h2>Classes And Functions</h2>\n\n<pre>\n<code class=\"language-python\">class Dog():\n\tdef __init__(self, name):\n\t\t\"\"\"Initialize dog object.\"\"\"\n\t\tself.name = name\n\n\tdef sit(self):\n\t\tprint(self.name + \" is sitting.\")\n\n# 'self' is reference to current object, which is called 'this' in Java; but unlike Java here 'self' has to be passed to each method explicitly\n\n#Inheritance\n\nclass SARDog(Dog):\n\t \"\"\"Represent a search dog.\"\"\"\n\t def __init__(self, name):\n\t\t \"\"\"Initialize the sardog.\"\"\"\n\t\t \tsuper().__init__(name)\n\t def search(self):\n\t\t \"\"\"Simulate searching.\"\"\"\n\t\t print(self.name + \" is searching.\")\n\n#Unlike Java, python supports; declaration of default parameter values (i.e. some parameters can be made optional), passing parameter by keyword instead of position\n\ndef describe_pet(animal, name=None):\n   \n#Can be called like this\ndescribe_pet('hamster', 'harry')\ndescribe_pet('snake')\n\n##Varargs\n\ndef build_profile(first, last, **user_info):\n\t \"\"\"Build a user's profile dictionary.\"\"\"\n\t # Build a dict with the required keys.\n\t profile = {'first': first, 'last': last}\n\t # Add any other keys and values.\n\t for key, value in user_info.items():\n\t profile[key] = value\n\t return profile\n\nuser_0 = build_profile('albert', 'einstein', location='princeton')\nuser_1 = build_profile('marie', 'curie', location='paris', field='chemistry')</code></pre>\n\n<h2>Logics</h2>\n\n<pre>\n<code class=\"language-python\">#Conditionall tests\nif x == 4:\n    pass\nelif x in range(5,10):\n    #something\nelif x not in [23,45,56]:\n    #something else\nelse:\n    #..\n\n#Logical Assignments\nx = True\ny = False\n</code></pre>\n\n<h2>Strings</h2>\n\n<pre>\n<code class=\"language-python\">\"\"\"Concatenation Of String: anything is not converted to string automatically while concatenating like in Java, you have to use method str(..)\"\"\"\n\nstr = \"\"\"Thiscanbeamultilinestring.\"\"\"\nprint(''.join(str.strip().split()) == str) =&gt; True\n\n\"\"\"Python negative indexing and slicing\"\"\"\n\n#n-th from the end =&gt; \nstr[-n]\n#last n characters =&gt; \nstr[-n:]\n#All except last n characters =&gt; \nstr[:-n]\n#First n characters\nstr[0:n] or str[0:-n]\n\n//Python formatters\n\"This is a number %s\" % (12)\n\n//startswith, endswith, find, replace, \n\n//Count characters in the string\nimport collections\ncollections.Counter(str)\n\ncounter = {}\nfor a in 'satyendra': counter[a] = counter.get(a, 0)+1\n\ncounter = dict( { chr(k) : 0 for k in range( ord('a'),ord('z'))})\nfor a in 'satyendra': counter[a] = counter[a] + 1\n\n//Counters support union(|), intersection(&amp;), addition(+), substraction(-)\n</code></pre>\n\n<p>&nbsp;</p>\n\n<h2>Maps/Dictionaries</h2>\n\n<pre>\n<code class=\"language-python\">D = {'a' : 1, 'b' : 2}\nD.keys(), D.values(), D.items()\n\nfor key, val in D.items():\n   pass\n\ncollections.OrderedDict( sorted(D.items())) #soted by key\ncollections.OrderedDict( sorted(D.items(), key = lambda t: t[1] )) #soted by value\n\n#OrderedDict maintains order of insertion\n\nif k in D: #Found\nif k in D: #Not Found\nif D.get(k) == None: #Not found\n\ndel D['a'] #deletes\nD.update( anotherDict )\n\n</code></pre>\n\n<p>&nbsp;</p>\n\n<h2>Lists</h2>\n\n<pre>\n<code class=\"language-python\">#List comprehensions; easy way \nsquares = [x**2 for x in range(1, 11)]\n\n#Slicing and indexing \nfirst_two = squares[:2]\nlast_two = squares[-2:]\ncopy_of_squares = squares[:]\n\n[1,2,3].append(4)\n[].insert(0,x) #prepend\n[].extend([]) #addAll\n\nif x in L: L.index(x)  #index throws ValueError if not present\ndel [..][-1]\n[].remove(&lt;elem&gt;)\n[].pop( &lt;optional index&gt;)\n \nusers.sort(reverse=True)\nsorted(users, reverse=True)\n\n</code></pre>\n\n<h2>Working With Files</h2>\n\n<pre>\n<code class=\"language-python\">#Reading\nwith open(filename) as file_object:\n \tlines = file_object.readlines()\n\nfor line in lines:\n \tprint(line)\n\n#Writing\nwith open(filename, 'w') as file_object:\n \tfile_object.write(\"I love programming.\")\n\n#Appending\nwith open(filename, 'a') as file_object:\n \tfile_object.write(\"\\nI love making games.\")\n\n</code></pre>\n\n<h2>Exception Handling</h2>\n\n<pre>\n<code class=\"language-python\">prompt = \"How many tickets do you need? \"\nnum_tickets = input(prompt)\ntry:\n\t num_tickets = int(num_tickets)\nexcept ValueError:\n \tprint(\"Please try again.\")\nelse:\n \tprint(\"Your tickets are printing.\")</code></pre>\n\n<p>&nbsp;</p>\n","authorId":null,"subject":"algos","tags":null,"img":null,"summary":null,"lastUpdated":null}