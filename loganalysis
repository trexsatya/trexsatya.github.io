<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.4/angular.min.js"></script>
<body>

<script>
var app = angular.module("myApp", []); 
app.controller("pageCtrl", function($scope) {
    $scope.appLogs = {};
    collectPods(collectLogs($scope));
});
function collectPods(whenDone){
	
}

function collectLogs(toUpdate){

   toUpdate.$applyAsync();
}

function socketData(wsUrl, onMessage){
	var ws = new WebSocket(wsUrl);
				
    ws.onopen = function(){
      // Web Socket is connected, send data using send()
      ws.send("Message to send");
      console.log("Message is sent...");
    };

    ws.onmessage = function (evt) { 
      var received_msg = evt.data;
      onMessage(received_msg);
    };

    ws.onclose = function() { 
      // websocket is closed.
      console.log("Connection is closed..."); 
    };

    window.onbeforeunload = function(event) {
      socket.close();
    };
}

</script>

<div ng-app="myApp" ng-controller="pageCtrl">
  <ul>
    <li ng-repeat="(app,logs) in appLogs">
      <div> {{app}} </div>
      <div style="max-height:200">
      	<div ng-repeat="logLine in appLogs[app] track by $index">
          {{logLine}}
        </div>
      </div>
    </li>
  </ul>
</div>

</body>
</html>


import com.jayway.jsonpath.JsonPath
import groovy.json.JsonSlurper

import java.awt.Toolkit
import java.awt.datatransfer.DataFlavor

import static groovy.json.JsonOutput.prettyPrint
import static groovy.json.JsonOutput.toJson

String string = Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor)

boolean isRunningJson = false
List jsonStrings = []
String jsonString = ""

def extractions = [] as Set
string.each {letter ->
    jsonStrings = jsonStrings.collect { it +letter }
    if(letter == "{") {
        jsonStrings.add("{")
    }
    else if(letter == "}"){
        jsonStrings.each {
            def json = jsonConversionOf(it)
            if(json) extractions.add(json)
        }
    }
}

extractions = extractions.collect { toJson(it)}.toSorted{a,b -> (a.length() <=> b.length()) }

def finalExtraction = []

for(int i=0; i < extractions.size(); i++){
    boolean isContained = false
    for(int j=i+1; j < extractions.size(); j++){
        if(extractions[j].contains(extractions[i])){
            isContained = true; break
        }
    }
    if(!isContained) finalExtraction.add(extractions[i])
}

finalExtraction.each {
    println(prettyPrint(it))
    println("\n---------------------------\n")
}

def jsonConversionOf(String jsonString){
    try {
        return new JsonSlurper().parseText(jsonString)
    } catch (e){
        return null
    }
}

def masterJson(set) {

}
