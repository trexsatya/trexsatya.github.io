<!DOCTYPE html>
<html>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.4/angular.min.js"></script>
<body>

<script>
var app = angular.module("myApp", []); 
app.controller("pageCtrl", function($scope) {
    $scope.appLogs = {};
    collectPods(collectLogs($scope));
});
function collectPods(whenDone){
	
}

function collectLogs(toUpdate){

   toUpdate.$applyAsync();
}

function socketData(wsUrl, onMessage){
	var ws = new WebSocket(wsUrl);
				
    ws.onopen = function(){
      // Web Socket is connected, send data using send()
      ws.send("Message to send");
      console.log("Message is sent...");
    };

    ws.onmessage = function (evt) { 
      var received_msg = evt.data;
      onMessage(received_msg);
    };

    ws.onclose = function() { 
      // websocket is closed.
      console.log("Connection is closed..."); 
    };

    window.onbeforeunload = function(event) {
      socket.close();
    };
}

</script>

<div ng-app="myApp" ng-controller="pageCtrl">
  <ul>
    <li ng-repeat="(app,logs) in appLogs">
      <div> {{app}} </div>
      <div style="max-height:200">
      	<div ng-repeat="logLine in appLogs[app] track by $index">
          {{logLine}}
        </div>
      </div>
    </li>
  </ul>
</div>

</body>
</html>


import groovy.transform.Field

import javax.script.Invocable
import javax.script.ScriptEngine
import javax.script.ScriptEngineManager
import java.awt.Toolkit
import java.awt.datatransfer.DataFlavor
import java.awt.datatransfer.StringSelection

String string = Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor)

def lines = string.split("\n");
def out = [new StringBuilder()]
lines.each { line ->
    if(line =~ /^\d{2,2}\:\d{2,2}:\d{2,2}.\d{3,}/){
        out.add(new StringBuilder(line))
    } else {
        out.last().append(line)
    }
}

def processedLogs = out.findAll {
    it.length() > 0
}.collect { processLogLine(it.toString())}.join("\n")

println(processedLogs)

def stringSelection = new StringSelection(processedLogs)
Toolkit.getDefaultToolkit().getSystemClipboard().setContents(stringSelection,stringSelection)

def processLogLine(String line) {
    if(line.contains("<?xml")) return formatXml(line)
    return tryJsonFormatting(line)
}

def formatXml(String string){
    Invocable invocable = getJSEngine()
    return invocable.invokeFunction("prettyXml", string)
}

def formatJson(String string){
    try {
        return getJSEngine().invokeFunction("prettyJson", string)
    }catch (e){
        return string
    }
}

def tryJsonFormatting(String logLine) {
    def jsonFormatOuts = []

    int len = logLine.length()
    int leftBraceAt = logLine.indexOf("{")
    if(leftBraceAt == -1) return logLine
    jsonFormatOuts.add(logLine.substring(0,leftBraceAt))

    def stack = [] as Stack

    StringBuilder jsonString = new StringBuilder()

    int x = leftBraceAt

    while (x < len){
        if(logLine[x] == "{") {
            stack.push("{")
        }
        else if(logLine[x] == "}") {
            stack.pop()
        }
        jsonString.append(logLine[x])

        if(stack.isEmpty()) {
            jsonFormatOuts.add(formatJson(jsonString.toString()))

            jsonString = new StringBuilder()
        }

        x++
    }
    jsonFormatOuts.add(formatJson(jsonString.toString()))
    return jsonFormatOuts.join("")
}


private Invocable getJSEngine() {
    ScriptEngineManager engineManager = new ScriptEngineManager();

    // Create ScriptEngine
    ScriptEngine engine = engineManager.getEngineByName("ECMAScript");

    //Create file and reader instance for reading the script file
    File file = new File("vkbeautify.js");
    Reader reader = new FileReader(file);

    //Pass the script file to the engine
    engine.eval("window={}")
    engine.eval(reader)

    //Create invocable instance
    Invocable invocable = (Invocable) engine

    //Invoke the methods defined in the script file
    engine.eval("var beautifier = new vkbeautify(); function prettyXml(text){ return beautifier.xml(text) }" +
            "function prettyJson(text){ return beautifier.json(text); }")
    invocable
}
